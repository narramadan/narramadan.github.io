{"version":3,"sources":["webpack:///./src/templates/templates.style.tsx","webpack:///./src/components/Pagination/pagination.style.tsx","webpack:///./src/components/Pagination/pagination.tsx","webpack:///./src/templates/blog-list.tsx","webpack:///./src/components/PostCardModern/postCardModern.style.tsx","webpack:///./src/components/PostCardModern/postCardModern.tsx"],"names":["BlogPostsWrapper","styled","div","RelatedPostWrapper","RelatedPostTitle","h2","themeGet","RelatedPostItems","RelatedPostItem","TagPostsWrapper","TagPageHeading","TagName","h1","BlogPostFooter","BlogPostComment","PostShare","BlogPostDetailsWrapper","BlogDetailsContent","props","extendedBlogPost","PostTags","PostRow","PostGrid","blinkingText","keyframes","BlinkingToDo","PaginationWrapper","PrevPage","NextPage","PageNumber","Pagination","prevLink","nextLink","currentPage","totalPage","className","to","aria-label","pageQuery","BlogList","Posts","data","allMdx","edges","pageContext","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","title","map","node","placeholderColors","setColor","Math","floor","random","length","categoryInfo","Categories","frontmatter","category","key","fields","slug","image","cover","childImageSharp","fluid","url","description","excerpt","date","tags","placeholderBG","PostCardModernWrapper","PostPreview","PostDetails","PostDate","PostCategory","PostTitle","Excerpt","p","PostCardModern","imageType","addAllClasses","push","join","alt","backgroundColor","fixed","dangerouslySetInnerHTML","__html","name","tag","index","defaultProps"],"mappings":"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","file":"component---src-templates-blog-list-tsx-b4f9aa997e9bcbcfbe9e.js","sourcesContent":["import styled, { keyframes} from \"styled-components\"\nimport { themeGet } from \"styled-system\"\n\nexport const BlogPostsWrapper = styled.div`\n  margin: 0 auto;\n  padding-top: 120px;\n  position: relative;\n\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n\n  .post_card {\n    margin-bottom: 120px;\n    @media (max-width: 990px) {\n      margin-bottom: 90px;\n    }\n    @media (max-width: 575px) {\n      margin-bottom: 60px;\n    }\n  }\n`\n\nexport const RelatedPostWrapper = styled.div`\n  margin: 0 auto;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n`\n\nexport const RelatedPostTitle = styled.h2`\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  font-size: 16px;\n  font-weight: 500;\n  font-family: ${themeGet(\"fontFamily.0\", \"'Fira Sans',sans-serif\")};\n  letter-spacing: 0.17em;\n  position: relative;\n  margin-bottom: 30px;\n\n  &:after {\n    content: \"\";\n    width: 68px;\n    height: 1px;\n    background: #292929;\n    display: block;\n    margin-top: 8px;\n  }\n`\n\nexport const RelatedPostItems = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -15px;\n`\n\nexport const RelatedPostItem = styled.div`\n  flex: 0 0 33.333333333%;\n  max-width: 33.333333333%;\n  padding: 0 15px;\n  @media (max-width: 575px) {\n    flex: 0 0 100%;\n    max-width: 100%;\n    &:nth-child(n + 2) {\n      margin-top: 50px;\n    }\n  }\n  .post_card {\n    &:hover {\n      .post_preview {\n        a {\n          transform: scale(1.05);\n        }\n      }\n    }\n\n    .post_preview {\n      margin-bottom: 16px;\n      overflow: hidden;\n      a {\n        display: block;\n        transition: 0.25s ease-in-out;\n      }\n      &:before {\n        filter: blur(10px);\n      }\n    }\n    .post_title {\n      font-size: 21px;\n      a {\n        display: block;\n        white-space: nowrap;\n        width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      @media (max-width: 1400px) {\n        font-size: 19px;\n      }\n      @media (max-width: 1200px) {\n        font-size: 17px;\n      }\n      @media (max-width: 990px) {\n        font-size: 15px;\n      }\n    }\n    .post_content {\n      max-width: 100%;\n    }\n\n    .post_tags {\n      margin-top: 20px;\n      a {\n        @media (max-width: 990px) {\n          font-size: 12px;\n          margin-right: 15px;\n        }\n      }\n    }\n  }\n`\nexport const TagPostsWrapper = styled.div`\n  margin: 0 auto;\n  padding-top: 80px;\n  position: relative;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 30px 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n\n  .post_card {\n    margin-bottom: 120px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n    @media (max-width: 990px) {\n      margin-bottom: 80px;\n    }\n    @media (max-width: 575px) {\n      margin-bottom: 60px;\n    }\n  }\n`\nexport const TagPageHeading = styled.div`\n  padding-left: 210px;\n  font-size: 15px;\n  font-weight: 400;\n  margin-bottom: 120px;\n  position: relative;\n  @media (max-width: 1200px) {\n    padding-left: 160px;\n  }\n  @media (max-width: 990px) {\n    padding-left: 0;\n    font-size: 13px;\n    margin-bottom: 80px;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 60px;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    width: 90px;\n    height: 1px;\n    background: #292929;\n    margin-top: 15px;\n  }\n`\n\nexport const TagName = styled.h1`\n  font-size: 30px;\n  font-weight: 700;\n  color: ${themeGet(\"colors.primary\", \"#D10068\")};\n  margin-bottom: 8px;\n  @media (max-width: 990px) {\n    font-size: 26px;\n  }\n  @media (max-width: 575px) {\n    font-size: 22px;\n  }\n`\nexport const BlogPostFooter = styled.div`\n  margin: 0 auto;\n  width: 870px;\n  max-width: 100%;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  @media (max-width: 990px) {\n    padding-top: 40px;\n  }\n`\n\nexport const BlogPostComment = styled.div`\n  margin: 0 auto;\n  width: 870px;\n  max-width: 100%;\n  padding-top: 80px;\n  @media (max-width: 990px) {\n    padding-top: 60px;\n  }\n`\n\nexport const PostShare = styled.div`\n  display: flex;\n  align-items: center;\n  > span {\n    flex-shrink: 0;\n  }\n  > div,\n  .SocialMediaShareButton {\n    cursor: pointer;\n    margin-left: 25px;\n    font-size: 22px;\n    outline: 0;\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\n    transition: 0.15s ease-in-out;\n    @media (max-width: 767px) {\n      font-size: 18px;\n      margin-left: 20px;\n    }\n    &:hover {\n      color: ${themeGet(\"colors.primary\", \"#D10068\")};\n    }\n    svg {\n      display: block;\n    }\n  }\n`\nexport const BlogPostDetailsWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 auto;\n  padding: 90px 0 120px 0;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1100px) {\n    width: 1050px;\n  }\n  @media (min-width: 1250px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n`\n\nexport const BlogDetailsContent = styled.div`\n  ${props => props.extendedBlogPost ? \n    `flex: 0 0 calc(100%);\n    max-width: calc(100%);\n    padding-right: 60px;\n\n    @media (max-width: 1249px) {\n      padding-right: 50px;\n    }\n    @media (max-width: 1100px) {\n      padding-right: 40px;\n    }\n\n    @media (max-width: 990px) {\n      padding-right: 30px;\n    }\n\n    @media (max-width: 767px) {\n      flex: 0 0 100%;\n      max-width: 100%;\n      padding-right: 0;\n    }` \n    : \n    `flex: 0 0 calc(100% - 360px);\n    max-width: calc(100% - 360px);\n    padding-right: 60px;\n\n    @media (max-width: 1249px) {\n      flex: 0 0 calc(100% - 320px);\n      max-width: calc(100% - 320px);\n      padding-right: 50px;\n    }\n    @media (max-width: 1100px) {\n      flex: 0 0 calc(100% - 280px);\n      max-width: calc(100% - 280px);\n      padding-right: 40px;\n    }\n\n    @media (max-width: 990px) {\n      flex: 0 0 calc(100% - 220px);\n      max-width: calc(100% - 220px);\n      padding-right: 30px;\n    }\n\n    @media (max-width: 767px) {\n      flex: 0 0 100%;\n      max-width: 100%;\n      padding-right: 0;\n    }`\n    }\n`\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  @media (max-width: 575px) {\n    display: none;\n  }\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#D10068\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n\nexport const PostRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -20px;\n  margin-bottom: 60px;\n  @media (max-width: 990px) {\n    margin-bottom: 40px;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 30px;\n  }\n`\n\nexport const PostGrid = styled.div`\n  flex: 0 0 50%;\n  max-width: 50%;\n  padding: 0 20px;\n  margin-bottom: 90px;\n  @media (max-width: 990px) {\n    margin-bottom: 70px;\n  }\n  @media (max-width: 767px) {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 50px;\n  }\n`\n\nconst blinkingText = keyframes`\n  0%{     color: #000;    }\n  49%{    color: #000; }\n  60%{    color: transparent; }\n  99%{    color:transparent;  }\n  100%{   color: #000;    }\n`\nexport const BlinkingToDo = styled.h1`\n  animation: ${blinkingText} 1.2s infinite;\n`","import styled from 'styled-components';\nimport { themeGet } from 'styled-system';\n\nexport const PaginationWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const PrevPage = styled.div`\n  min-width: 32px;\n  a {\n    width: 32px;\n    height: 32px;\n    color: ${themeGet('colors.textColor', '#292929')};\n    border-radius: 50%;\n    background-color: #f3f3f3;\n    font-size: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: 0.15s ease-in-out;\n    svg {\n      display: block;\n    }\n    &:hover {\n      color: #fff;\n      background-color: ${themeGet('colors.primary', '#D10068')};\n    }\n  }\n`;\n\nexport const NextPage = styled.div`\n  min-width: 32px;\n  a {\n    width: 32px;\n    height: 32px;\n    color: ${themeGet('colors.textColor', '#292929')};\n    border-radius: 50%;\n    background-color: #f3f3f3;\n    font-size: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: 0.15s ease-in-out;\n    svg {\n      display: block;\n    }\n    &:hover {\n      color: #fff;\n      background-color: ${themeGet('colors.primary', '#D10068')};\n    }\n  }\n`;\n\nexport const PageNumber = styled.div``;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport { IoMdArrowRoundBack, IoMdArrowRoundForward } from 'react-icons/io';\nimport {\n  PaginationWrapper,\n  PrevPage,\n  NextPage,\n  PageNumber,\n} from './pagination.style';\n\ntype PaginationProps = {\n  prevLink?: string | undefined | null | boolean;\n  nextLink?: string | undefined | null | boolean;\n  currentPage: string;\n  totalPage: string;\n  className?: string;\n};\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({\n  prevLink,\n  nextLink,\n  currentPage,\n  totalPage,\n  className,\n  ...props\n}) => {\n  return (\n    <PaginationWrapper {...props} className={className}>\n      <PrevPage>\n        {prevLink && (\n          <Link to={`${prevLink}`} aria-label=\"Prev\">\n            <IoMdArrowRoundBack />\n          </Link>\n        )}\n      </PrevPage>\n\n      <PageNumber>{`Page ${currentPage} Of ${totalPage}`}</PageNumber>\n\n      <NextPage>\n        {nextLink && (\n          <Link to={`${nextLink}`} aria-label=\"Next\">\n            <IoMdArrowRoundForward />\n          </Link>\n        )}\n      </NextPage>\n    </PaginationWrapper>\n  );\n};\n\nexport default Pagination;\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostCardModern from \"~/components/PostCardModern/postCardModern\"\nimport Pagination from \"~/components/Pagination/pagination\"\nimport Layout from \"~/components/layout\"\nimport SEO from \"~/components/seo\"\nimport _ from 'lodash'\nimport Categories from '~/utils/CategoryConstants'\n\nimport { BlogPostsWrapper, PostRow, PostGrid } from \"./templates.style\"\n\nconst BlogList = (props: any) => {\n  const { data } = props\n  const Posts = data.allMdx.edges\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? \"/page/1\" : `/page/${(currentPage - 1).toString()}`\n  const nextPage = `/page/${(currentPage + 1).toString()}`\n  const PrevLink = !isFirst && prevPage\n  const NextLink = !isLast && nextPage\n\n  return (\n    <Layout>\n      <SEO title={`Page ${currentPage}`} />\n\n      <BlogPostsWrapper>\n        <PostRow>\n          {Posts.map(({ node }: any) => {\n            //Random Placeholder Color\n            const placeholderColors = [\n              \"#55efc4\",\n              \"#81ecec\",\n              \"#74b9ff\",\n              \"#a29bfe\",\n              \"#ffeaa7\",\n              \"#fab1a0\",\n              \"#e17055\",\n              \"#0984e3\",\n              \"#badc58\",\n              \"#c7ecee\",\n            ]\n            const setColor =\n              placeholderColors[\n                Math.floor(Math.random() * placeholderColors.length)\n              ]\n            const categoryInfo =  _.get(Categories, node.frontmatter.category)\n            return (\n              <PostGrid>\n                <PostCardModern\n                  key={node.fields.slug}\n                  title={node.frontmatter.title || node.fields.slug}\n                  image={\n                    node.frontmatter.cover == null\n                      ? null\n                      : node.frontmatter.cover.childImageSharp.fluid\n                  }\n                  url={node.fields.slug}\n                  description={node.frontmatter.description || node.excerpt}\n                  date={node.frontmatter.date}\n                  category={categoryInfo}\n                  tags={node.frontmatter.tags}\n                  placeholderBG={setColor}\n                />\n              </PostGrid>\n            )\n          })}\n        </PostRow>\n        <Pagination\n          prevLink={PrevLink}\n          nextLink={NextLink}\n          currentPage={`${currentPage}`}\n          totalPage={`${numPages}`}\n        />\n      </BlogPostsWrapper>\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    sitePage {\n      path\n    }\n    allMdx(\n      filter: {\n        frontmatter: {\n          templateKey: {eq: \"article\"},\n          published: {eq: true}\n        }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\n            title\n            description\n            category\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 1170, quality: 100) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\nimport { themeGet } from \"styled-system\"\n\nexport const PostCardModernWrapper = styled.div`\n  position: relative;\n`\n\nexport const PostPreview = styled.div`\n  margin-bottom: 30px;\n  position: relative;\n  min-height: 150px;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`\n\nexport const PostDetails = styled.div``\n\nexport const PostDate = styled.div`\n  position: absolute;\n  width: 75px;\n  height: 75px;\n  top: 30px;\n  left: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 30px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`\n\nexport const PostCategory = styled.div`\n  position: absolute;\n  width: 200px;\n  height: 30px;\n  top: 30px;\n  right: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`\n\nexport const PostTitle = styled.h2`\n  font-size: 21px;\n  font-weight: 700;\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  font-family: ${themeGet(\"fontFamily.0\")};\n  a {\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  }\n  @media (max-width: 1200px) {\n    font-size: 20px;\n  }\n  @media (max-width: 990px) {\n    font-size: 19px;\n  }\n  @media (max-width: 575px) {\n    font-size: 18px;\n  }\n`\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet(\"fontSizes.3\", \"15\")}px;\n  color: ${themeGet(\"textColor\", \"#292929\")};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-bottom: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#D10068\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\nimport Img from \"gatsby-image\"\nimport {\n  PostCardModernWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostCategory,\n  PostTitle,\n  Excerpt,\n  PostTags,\n} from \"./postCardModern.style\"\n\ninterface PostCardModernProps {\n  image?: any\n  title: string\n  description?: string\n  url: string\n  date?: string\n  category: any\n  tags?: []\n  className?: string\n  imageType?: \"fixed\" | \"fluid\"\n  placeholderBG?: string\n}\n\nconst PostCardModern: React.FunctionComponent<PostCardModernProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  category,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = [\"post_card_modern\"]\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className)\n  }\n\n  return (\n    <PostCardModernWrapper className={addAllClasses.join(\" \")} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n            {imageType === \"fluid\" ? (\n              <Img\n                fluid={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            ) : (\n              <Img\n                fixed={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            )}\n          </Link>\n          {date && (\n            <PostDate\n              dangerouslySetInnerHTML={{\n                __html: date,\n              }}\n              className=\"post_date\"\n            />\n          )}\n          {category && (\n            <PostCategory\n              dangerouslySetInnerHTML={{\n                __html: category.name,\n              }}\n              className=\"post_category\"\n            />\n          )}\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {tags == null ? null : (\n          <PostTags className=\"post_tags\">\n            {tags.map((tag: string, index: number) => (\n              <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                {`#${tag}`}\n              </Link>\n            ))}\n          </PostTags>\n        )}\n        <PostTitle className=\"post_title\">\n          <Link to={url}>{title}</Link>\n        </PostTitle>\n        {description && (\n          <Excerpt\n            dangerouslySetInnerHTML={{\n              __html: description,\n            }}\n            className=\"excerpt\"\n          />\n        )}\n      </PostDetails>\n    </PostCardModernWrapper>\n  )\n}\n\nPostCardModern.defaultProps = {\n  imageType: \"fluid\",\n}\n\nexport default PostCardModern\n"],"sourceRoot":""}