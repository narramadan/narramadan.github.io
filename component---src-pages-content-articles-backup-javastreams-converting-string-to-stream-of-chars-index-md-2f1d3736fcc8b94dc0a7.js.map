{"version":3,"file":"component---src-pages-content-articles-backup-javastreams-converting-string-to-stream-of-chars-index-md-2f1d3736fcc8b94dc0a7.js","mappings":"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","sources":["webpack://2much2learn.com/./src/pages/content/articles_backup/javastreams/converting-string-to-stream-of-chars/index.md","webpack://2much2learn.com/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"templateKey\": \"article\",\n  \"published\": false,\n  \"displayComments\": true,\n  \"showAuthorInfo\": false,\n  \"author\": \"narramadan\",\n  \"title\": \"Converting String to Stream of chars\",\n  \"description\": \"Converting String to Stream of chars\",\n  \"date\": \"2020-01-05T23:46:37.121Z\",\n  \"updated\": \"2020-01-05T23:46:37.121Z\",\n  \"cover\": \"../../../images/blog-banners/microservice-banner-1200x690.png\",\n  \"category\": \"javastreams\",\n  \"tags\": [\"java\", \"streams\", \"featured\"]\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`Java 8 introduced the Stream API, with functional-like operations for processing sequences. If you want to read more about it, have a look at this article.`}</p>\n    <p>{`In this quick article, we’ll see how to convert a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` to a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` of single characters.`}</p>\n    <h2 {...{\n      \"id\": \"conversion-using-chars\"\n    }}>{`Conversion Using chars()`}</h2>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` API has a new method – `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` – with which we can obtain an instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` from a String object. This simple API returns an instance of IntStream from the input String.`}</p>\n    <p>{`Simply put, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` contains an integer representation of the characters from the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` object:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`String`}</span>{` testString `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"String\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`IntStream`}</span>{` intStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`chars`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`It’s possible to work with the integer representation of the characters without converting them to their `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` equivalent. This can lead to some minor performance gains, as there will be no need to box each integer into a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` object.`}</p>\n    <p>{`However, if we’re to display the characters for reading, we need to convert the integers to the human-friendly `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` form:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`Character`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` characterStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`chars`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2 {...{\n      \"id\": \"conversion-using-codepoints\"\n    }}>{`Conversion Using codePoints()`}</h2>\n    <p>{`Alternatively, we can use the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` method to get an instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` from a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{`. The advantage of using this API is that Unicode supplementary characters can be handled effectively.`}</p>\n    <p>{`Supplementary characters are represented by Unicode surrogate pairs and will be merged into a single codepoint. This way we can correctly process (and display) any Unicode symbol:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`IntStream`}</span>{` intStream1 `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`We need to map the returned `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream<Character>`}</code>{` to display it to users:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`Character`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` characterStream2 \n  `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2 {...{\n      \"id\": \"conversion-to-a-stream-of-single-character-strings\"\n    }}>{`Conversion to a Stream of Single Character Strings`}</h2>\n    <p>{`So far, we’ve been able to get a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` of characters; what if we want a Stream of single character `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Strings`}</code>{` instead?`}</p>\n    <p>{`Just as specified earlier in the article, we’ll use either the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` methods to obtain an instance of IntStream that we can now map to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream<String>`}</code>{`.`}</p>\n    <p>{`The mapping process involves converting the integer values to their respective character equivalents first.`}</p>\n    <p>{`Then we can use String.valueOf() or Character.toString() to convert the characters to a String object:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`String`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` stringStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`String`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`valueOf`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`In this quick tutorial, we learn to obtain a stream of Character from a String object by either calling `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` methods.`}</p>\n    <p>{`This allows us to take full advantage of the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream API`}</code>{` – to conveniently and effectively manipulate characters.`}</p>\n    <p>{`As always, code snippets can be found over on GitHub.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}