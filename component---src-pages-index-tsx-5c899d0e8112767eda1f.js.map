{"version":3,"file":"component---src-pages-index-tsx-5c899d0e8112767eda1f.js","mappings":"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","sources":["webpack://2much2learn.com/./src/components/FeaturePost/featurePost.style.tsx","webpack://2much2learn.com/./src/components/FeaturePost/featurePost.tsx","webpack://2much2learn.com/./src/components/PostCardModern/postCardModern.style.tsx","webpack://2much2learn.com/./src/components/PostCardModern/postCardModern.tsx","webpack://2much2learn.com/./src/containers/HomePage/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Posts/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Posts/index.tsx","webpack://2much2learn.com/./src/images/banner-bg.png","webpack://2much2learn.com/./src/containers/HomePage/Banner/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Banner/index.tsx","webpack://2much2learn.com/./src/containers/HomePage/index.tsx","webpack://2much2learn.com/./src/pages/index.tsx"],"sourcesContent":["import styled from \"styled-components\"\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const FeaturedPostWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  &:hover {\r\n    .post_preview {\r\n      > a {\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const PostPreview = styled.div`\r\n  flex: 0 0 90px;\r\n  flex-shrink: 0;\r\n  margin-right: 15px;\r\n  overflow: hidden;\r\n  @media (max-width: 990px) {\r\n    flex: 0 0 60px;\r\n  }\r\n  > a {\r\n    display: block;\r\n    transition: 0.15s ease-in-out;\r\n    transform-origin: top left;\r\n  }\r\n`\r\n\r\nexport const PostDetails = styled.div`\r\n  flex-grow: 1;\r\n`\r\n\r\nexport const PostTitle = styled.h1`\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n\r\n  line-height: 1.53;\r\n  margin-bottom: 0;\r\n  font-family: ${themeGet(\"fontFamily.0\")};\r\n\r\n  @media (max-width: 990px) {\r\n    font-size: 16px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 14px;\r\n  }\r\n  a {\r\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet(\"primary\", \"#D10068\")};\r\n    }\r\n  }\r\n`\r\n\r\nexport const PostMeta = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport const PostCategory = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-top: -12px;\r\n  margin-bottom: 12px;\r\n  @media (max-width: 990px) {\r\n    margin-top: 10px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-top: 8px;\r\n  }\r\n\r\n  a,\r\n  span {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    color: ${themeGet(\"primary\", \"#292929\")};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-top: 12px;\r\n  @media (max-width: 990px) {\r\n    margin-top: 10px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-top: 8px;\r\n  }\r\n\r\n  a,\r\n  span {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    color: ${themeGet(\"primary\", \"#D10068\")};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport _ from \"lodash\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport {\r\n  FeaturedPostWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostTitle,\r\n  PostMeta,\r\n  PostTags,\r\n  PostCategory\r\n} from \"./featurePost.style\"\r\n\r\ninterface FeaturedPostProps {\r\n  image?: any\r\n  title: string\r\n  url: string\r\n  category: any\r\n  tags?: []\r\n  className?: string\r\n  imageType?: \"fixed\" | \"fluid\"\r\n  placeholderBG?: string\r\n}\r\n\r\nconst FeaturedPost: React.FunctionComponent<FeaturedPostProps> = ({\r\n  image,\r\n  title,\r\n  url,\r\n  category,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  placeholderBG,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = [\"featured_post\"]\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className)\r\n  }\r\n\r\n  return (\r\n    <FeaturedPostWrapper className={addAllClasses.join(\" \")} {...props}>\r\n      {image == null ? null : (\r\n        <PostPreview className=\"post_preview\">\r\n          <Link to={url}>\r\n              <GatsbyImage\r\n                image={image}\r\n                alt=\"post preview\"\r\n                backgroundColor={placeholderBG}\r\n              />            \r\n          </Link>\r\n        </PostPreview>\r\n      )}\r\n\r\n      <PostDetails>\r\n        {category && (\r\n          <PostCategory className=\"post_category\">\r\n          <Link\r\n            to={`/categories/${_.kebabCase(category.alias)}/`}\r\n          >{`${category.name}`}</Link>\r\n        </PostCategory>\r\n        )}\r\n        <PostTitle className=\"post_title\">\r\n          <Link to={url}>{title}</Link>\r\n        </PostTitle>\r\n        <PostMeta>\r\n          {tags == null ? null : (\r\n            <PostTags className=\"post_tags\">\r\n              {tags.slice(0, 2).map((tag: string, index: number) => (\r\n                <Link\r\n                  key={index}\r\n                  to={`/tags/${_.kebabCase(tag)}/`}\r\n                >{`#${tag}`}</Link>\r\n              ))}\r\n            </PostTags>\r\n          )}\r\n        </PostMeta>\r\n      </PostDetails>\r\n    </FeaturedPostWrapper>\r\n  )\r\n}\r\n\r\nFeaturedPost.defaultProps = {\r\n  imageType: \"fluid\",\r\n}\r\n\r\nexport default FeaturedPost\r\n","import styled from \"styled-components\"\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardModernWrapper = styled.div`\r\n  position: relative;\r\n`\r\n\r\nexport const PostPreview = styled.div`\r\n  margin-bottom: 30px;\r\n  position: relative;\r\n  min-height: 150px;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 80%;\r\n    height: 80%;\r\n    background-color: #757575;\r\n    bottom: 0;\r\n    left: 10%;\r\n    filter: blur(15px);\r\n  }\r\n`\r\n\r\nexport const PostDetails = styled.div``\r\n\r\nexport const PostDate = styled.div`\r\n  position: absolute;\r\n  width: 75px;\r\n  height: 75px;\r\n  top: 30px;\r\n  left: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 6px;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: normal;\r\n    line-height: 1;\r\n    margin-top: 3px;\r\n  }\r\n`\r\n\r\nexport const PostCategory = styled.div`\r\n  position: absolute;\r\n  width: 200px;\r\n  height: 30px;\r\n  top: 30px;\r\n  right: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  border-radius: 6px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: normal;\r\n    line-height: 1;\r\n    margin-top: 3px;\r\n  }\r\n`\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 21px;\r\n  font-weight: 700;\r\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  font-family: ${themeGet(\"fontFamily.0\")};\r\n  a {\r\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 20px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 19px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet(\"fontSizes.3\", \"15\")}px;\r\n  color: ${themeGet(\"textColor\", \"#292929\")};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet(\"primary\", \"#D10068\")};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport _ from \"lodash\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport {\r\n  PostCardModernWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostCategory,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostTags,\r\n} from \"./postCardModern.style\"\r\n\r\ninterface PostCardModernProps {\r\n  image?: any\r\n  title: string\r\n  description?: string\r\n  url: string\r\n  date?: string\r\n  category: any\r\n  tags?: []\r\n  className?: string\r\n  imageType?: \"fixed\" | \"fluid\"\r\n  placeholderBG?: string\r\n}\r\n\r\nconst PostCardModern: React.FunctionComponent<PostCardModernProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  category,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  placeholderBG,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = [\"post_card_modern\"]\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className)\r\n  }\r\n\r\n  return (\r\n    <PostCardModernWrapper className={addAllClasses.join(\" \")} {...props}>\r\n      {image == null ? null : (\r\n        <PostPreview className=\"post_preview\">\r\n          <Link to={url}>\r\n              <GatsbyImage\r\n                image={image}\r\n                alt=\"post preview\"\r\n                backgroundColor={placeholderBG}\r\n              />\r\n          </Link>\r\n          {date && (\r\n            <PostDate\r\n              dangerouslySetInnerHTML={{\r\n                __html: date,\r\n              }}\r\n              className=\"post_date\"\r\n            />\r\n          )}\r\n          {category && (\r\n            <PostCategory\r\n              dangerouslySetInnerHTML={{\r\n                __html: category.name,\r\n              }}\r\n              className=\"post_category\"\r\n            />\r\n          )}\r\n        </PostPreview>\r\n      )}\r\n\r\n      <PostDetails className=\"post_details\">\r\n        {tags == null ? null : (\r\n          <PostTags className=\"post_tags\">\r\n            {tags.map((tag: string, index: number) => (\r\n              <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                {`#${tag}`}\r\n              </Link>\r\n            ))}\r\n          </PostTags>\r\n        )}\r\n        <PostTitle className=\"post_title\">\r\n          <Link to={url}>{title}</Link>\r\n        </PostTitle>\r\n        {description && (\r\n          <Excerpt\r\n            dangerouslySetInnerHTML={{\r\n              __html: description,\r\n            }}\r\n            className=\"excerpt\"\r\n          />\r\n        )}\r\n      </PostDetails>\r\n    </PostCardModernWrapper>\r\n  )\r\n}\r\n\r\nPostCardModern.defaultProps = {\r\n  imageType: \"fluid\",\r\n}\r\n\r\nexport default PostCardModern\r\n","import styled from \"styled-components\"\r\n\r\nconst PersonalBlogWrapper = styled.div``\r\n\r\nexport default PersonalBlogWrapper\r\n","import styled from \"styled-components\"\r\n\r\nconst BlogPostsWrapper = styled.div`\r\n  margin: 0 auto;\r\n  padding-top: 120px;\r\n  position: relative;\r\n  @media (min-width: 991px) {\r\n    width: 900px;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    width: 1170px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    padding: 80px 45px 0 45px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    padding: 60px 25px 0 25px;\r\n  }\r\n`\r\nexport const PostRow = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin: 0 -20px;\r\n  margin-bottom: 30px;\r\n  @media (max-width: 990px) {\r\n    margin-bottom: 20px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nexport const PostGrid = styled.div`\r\n  flex: 0 0 50%;\r\n  max-width: 50%;\r\n  padding: 0 20px;\r\n  margin-bottom: 90px;\r\n  @media (max-width: 990px) {\r\n    margin-bottom: 70px;\r\n  }\r\n  @media (max-width: 767px) {\r\n    flex: 0 0 100%;\r\n    max-width: 100%;\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-bottom: 50px;\r\n  }\r\n`\r\n\r\nexport const SeeMore = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nexport default BlogPostsWrapper\r\n","import * as React from \"react\"\r\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\r\nimport Button from \"~/components/Button/Button\"\r\nimport PostCardModern from \"~/components/PostCardModern/postCardModern\"\r\nimport _ from 'lodash'\r\nimport Categories from '~/utils/CategoryConstants'\r\nimport BlogPostsWrapper, { PostRow, PostGrid, SeeMore } from \"./style\"\r\n\r\ntype PostsProps = {}\r\n\r\nconst Posts: React.FunctionComponent<PostsProps> = () => {\r\n  const Data = useStaticQuery(graphql`\r\n    query {\r\n      allMdx(\r\n        filter: {\r\n          frontmatter: {\r\n            templateKey: {eq: \"article\"},\r\n            published: {eq: true}\r\n          }\r\n        }\r\n        sort: { fields: [frontmatter___date], order: DESC }\r\n        limit: 6\r\n      ) {\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(pruneLength: 200)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\r\n              title\r\n              description\r\n              category\r\n              tags\r\n              cover {\r\n                childImageSharp {\r\n                  gatsbyImageData(\r\n                    width: 570\r\n                    height: 370\r\n                    quality: 100\r\n                  )\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const Posts = Data.allMdx.edges\r\n\r\n  return (\r\n    <BlogPostsWrapper>\r\n      <PostRow>\r\n        {Posts.map(({ node }: any) => {\r\n          const title = node.frontmatter.title || node.fields.slug\r\n          const categoryInfo =  _.get(Categories, node.frontmatter.category)\r\n          //Random Placeholder Color\r\n          const placeholderColors = [\r\n            \"#55efc4\",\r\n            \"#81ecec\",\r\n            \"#74b9ff\",\r\n            \"#a29bfe\",\r\n            \"#ffeaa7\",\r\n            \"#fab1a0\",\r\n            \"#e17055\",\r\n            \"#0984e3\",\r\n            \"#badc58\",\r\n            \"#c7ecee\",\r\n          ]\r\n          const setColor =\r\n            placeholderColors[\r\n              Math.floor(Math.random() * placeholderColors.length)\r\n            ]\r\n\r\n          return (\r\n            <PostGrid key={node.fields.slug}>\r\n              <PostCardModern\r\n                key={node.fields.slug}\r\n                title={title}\r\n                image={\r\n                  node.frontmatter.cover == null\r\n                    ? null\r\n                    : node.frontmatter.cover.childImageSharp.gatsbyImageData\r\n                }\r\n                url={node.fields.slug}\r\n                description={node.excerpt}\r\n                date={node.frontmatter.date}\r\n                category={categoryInfo}\r\n                tags={node.frontmatter.tags}\r\n                placeholderBG={setColor}\r\n              />\r\n            </PostGrid>\r\n          )\r\n        })}\r\n      </PostRow>\r\n      <SeeMore>\r\n        <Link to=\"page/1\">\r\n          <Button title=\"See more\" type=\"submit\" />\r\n        </Link>\r\n      </SeeMore>\r\n    </BlogPostsWrapper>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n","export default __webpack_public_path__ + \"static/banner-bg-d621e9d82003114fc61280ae66ae5d73.png\";","import styled from \"styled-components\"\r\nimport { themeGet } from '@styled-system/theme-get';\r\nimport BannerBG from \"~/images/banner-bg.png\"\r\n\r\nexport const BannerWrapper = styled.div`\r\n  position: relative;\r\n  padding: 90px 0;\r\n  background-color: #d96233;\r\n  background-image: url(${BannerBG});\r\n  background-size: cover;\r\n  background-position: center;\r\n  min-height: 870px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  @media (max-width: 1500px) {\r\n    min-height: 700px;\r\n    padding: 80px 0;\r\n  }\r\n\r\n  @media (max-width: 990px) {\r\n    min-height: 600px;\r\n    padding: 60px 0;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    min-height: 300px;\r\n    padding: 40px 0;\r\n  }\r\n`\r\n\r\nexport const BannerInner = styled.div`\r\n  margin: 0 auto;\r\n  width: 100%;\r\n\r\n  @media (min-width: 991px) {\r\n    width: 900px;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    width: 1170px;\r\n  }\r\n\r\n  @media (max-width: 990px) {\r\n    padding-left: 45px;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    padding-left: 25px;\r\n    padding-right: 25px;\r\n  }\r\n`\r\n\r\nexport const FeaturePosts = styled.div`\r\n  width: 460px;\r\n  max-width: 100%;\r\n  background-color: #fff;\r\n  border-radius: 6px;\r\n  padding: 45px;\r\n  @media (max-width: 990px) {\r\n    width: 400px;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    padding: 25px;\r\n  }\r\n\r\n  .featured_post {\r\n    margin-bottom: 30px;\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const Title = styled.div`\r\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  font-family: ${themeGet(\"fontFamily.0\", \"'Fira Sans',sans-serif\")};\r\n  letter-spacing: 0.17em;\r\n  position: relative;\r\n  margin-bottom: 30px;\r\n\r\n  &:after {\r\n    content: \"\";\r\n    width: 80px;\r\n    height: 1px;\r\n    background: #292929;\r\n    display: block;\r\n    margin-top: 8px;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport FeaturePost from \"~/components/FeaturePost/featurePost\"\r\nimport _ from 'lodash'\r\nimport Categories from '~/utils/CategoryConstants'\r\nimport { BannerWrapper, BannerInner, FeaturePosts, Title } from \"./style\"\r\n\r\ntype BannerProps = {}\r\n\r\nconst Banner: React.FunctionComponent<BannerProps> = () => {\r\n  const Data = useStaticQuery(graphql`\r\n    query {\r\n      allMdx(\r\n        sort: { fields: [frontmatter___date], order: DESC }\r\n        limit: 5\r\n        filter: { \r\n          frontmatter: { \r\n            tags: { eq: \"featured\" },\r\n            published: {eq: true}\r\n          } \r\n        }\r\n      ) {\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(pruneLength: 300)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\r\n              title\r\n              description\r\n              category\r\n              tags\r\n              cover {\r\n                childImageSharp {\r\n                  gatsbyImageData(\r\n                    width: 90\r\n                    height: 90\r\n                    quality: 100\r\n                  )                  \r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const Posts = Data.allMdx.edges\r\n\r\n  return (\r\n    <BannerWrapper>\r\n      <BannerInner>\r\n        <FeaturePosts>\r\n          <Title>Featured Posts</Title>\r\n          {Posts.map(({ node }: any) => {\r\n            const title = node.frontmatter.title || node.fields.slug\r\n            const categoryInfo =  _.get(Categories, node.frontmatter.category)\r\n\r\n            //Random Placeholder Color\r\n            const placeholderColors = [\r\n              \"#55efc4\",\r\n              \"#81ecec\",\r\n              \"#74b9ff\",\r\n              \"#a29bfe\",\r\n              \"#ffeaa7\",\r\n              \"#fab1a0\",\r\n              \"#e17055\",\r\n              \"#0984e3\",\r\n              \"#badc58\",\r\n              \"#c7ecee\",\r\n            ]\r\n            const setColor =\r\n              placeholderColors[\r\n                Math.floor(Math.random() * placeholderColors.length)\r\n              ]\r\n\r\n            return (\r\n              <FeaturePost\r\n                key={node.fields.slug}\r\n                title={title}\r\n                image={\r\n                  node.frontmatter.cover == null\r\n                    ? null\r\n                    : node.frontmatter.cover.childImageSharp.gatsbyImageData\r\n                }\r\n                url={node.fields.slug}\r\n                category={categoryInfo}\r\n                tags={node.frontmatter.tags}\r\n                placeholderBG={setColor}\r\n              />\r\n            )\r\n          })}\r\n        </FeaturePosts>\r\n      </BannerInner>\r\n    </BannerWrapper>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import * as React from \"react\"\r\nimport PersonalBlogWrapper from \"./style\"\r\nimport Posts from \"./Posts\"\r\nimport Banner from \"./Banner\"\r\n\r\ntype PersonalBlogProps = {}\r\n\r\nconst PersonalBlog: React.FunctionComponent<PersonalBlogProps> = ({\r\n  ...props\r\n}) => {\r\n  return (\r\n    <PersonalBlogWrapper {...props}>\r\n      <Banner />\r\n      <Posts />\r\n    </PersonalBlogWrapper>\r\n  )\r\n}\r\n\r\nexport default PersonalBlog\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"~/components/layout\"\r\nimport PersonalBlog from \"~/containers/HomePage\"\r\nimport SEO from \"~/components/seo\"\r\n\r\nconst PersonalBlogPage = (props: any) => {\r\n  const { data } = props\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title=\"2much2learn | Blog\"\r\n        description={data.site.siteMetadata.description}\r\n      />\r\n      <PersonalBlog />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PersonalBlogPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["FeaturedPostWrapper","styled","PostPreview","PostDetails","PostTitle","themeGet","PostMeta","PostCategory","PostTags","FeaturedPost","image","title","url","category","tags","className","placeholderBG","imageType","props","addAllClasses","push","join","Link","to","G","alt","backgroundColor","alias","name","slice","map","tag","index","key","defaultProps","PostCardModernWrapper","PostDate","Excerpt","PostCardModern","description","date","dangerouslySetInnerHTML","__html","BlogPostsWrapper","PostRow","PostGrid","SeeMore","Posts","useStaticQuery","allMdx","edges","node","frontmatter","fields","slug","categoryInfo","Categories","placeholderColors","setColor","Math","floor","random","length","cover","childImageSharp","gatsbyImageData","excerpt","Button","type","BannerWrapper","BannerBG","BannerInner","FeaturePosts","Title","data","site","siteMetadata"],"sourceRoot":""}