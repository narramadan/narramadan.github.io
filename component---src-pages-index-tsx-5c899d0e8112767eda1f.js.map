{"version":3,"file":"component---src-pages-index-tsx-5c899d0e8112767eda1f.js","mappings":"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","sources":["webpack://2much2learn.com/./src/components/FeaturePost/featurePost.style.tsx","webpack://2much2learn.com/./src/components/FeaturePost/featurePost.tsx","webpack://2much2learn.com/./src/components/PostCardModern/postCardModern.style.tsx","webpack://2much2learn.com/./src/components/PostCardModern/postCardModern.tsx","webpack://2much2learn.com/./src/containers/HomePage/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Posts/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Posts/index.tsx","webpack://2much2learn.com/./src/images/banner-bg.png","webpack://2much2learn.com/./src/containers/HomePage/Banner/style.tsx","webpack://2much2learn.com/./src/containers/HomePage/Banner/index.tsx","webpack://2much2learn.com/./src/containers/HomePage/index.tsx","webpack://2much2learn.com/./src/pages/index.tsx"],"sourcesContent":["import styled from \"styled-components\"\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const FeaturedPostWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  &:hover {\n    .post_preview {\n      > a {\n        transform: scale(1.1);\n      }\n    }\n  }\n`\n\nexport const PostPreview = styled.div`\n  flex: 0 0 90px;\n  flex-shrink: 0;\n  margin-right: 15px;\n  overflow: hidden;\n  @media (max-width: 990px) {\n    flex: 0 0 60px;\n  }\n  > a {\n    display: block;\n    transition: 0.15s ease-in-out;\n    transform-origin: top left;\n  }\n`\n\nexport const PostDetails = styled.div`\n  flex-grow: 1;\n`\n\nexport const PostTitle = styled.h1`\n  font-size: 18px;\n  font-weight: 700;\n\n  line-height: 1.53;\n  margin-bottom: 0;\n  font-family: ${themeGet(\"fontFamily.0\")};\n\n  @media (max-width: 990px) {\n    font-size: 16px;\n  }\n  @media (max-width: 575px) {\n    font-size: 14px;\n  }\n  a {\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\n    transition: 0.15s ease-in-out;\n    &:hover {\n      color: ${themeGet(\"primary\", \"#D10068\")};\n    }\n  }\n`\n\nexport const PostMeta = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nexport const PostCategory = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: -12px;\n  margin-bottom: 12px;\n  @media (max-width: 990px) {\n    margin-top: 10px;\n  }\n  @media (max-width: 575px) {\n    margin-top: 8px;\n  }\n\n  a,\n  span {\n    display: block;\n    margin-right: 30px;\n    font-size: 13px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#292929\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 12px;\n  @media (max-width: 990px) {\n    margin-top: 10px;\n  }\n  @media (max-width: 575px) {\n    margin-top: 8px;\n  }\n\n  a,\n  span {\n    display: block;\n    margin-right: 30px;\n    font-size: 13px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#D10068\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport {\n  FeaturedPostWrapper,\n  PostPreview,\n  PostDetails,\n  PostTitle,\n  PostMeta,\n  PostTags,\n  PostCategory\n} from \"./featurePost.style\"\n\ninterface FeaturedPostProps {\n  image?: any\n  title: string\n  url: string\n  category: any\n  tags?: []\n  className?: string\n  imageType?: \"fixed\" | \"fluid\"\n  placeholderBG?: string\n}\n\nconst FeaturedPost: React.FunctionComponent<FeaturedPostProps> = ({\n  image,\n  title,\n  url,\n  category,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = [\"featured_post\"]\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className)\n  }\n\n  return (\n    <FeaturedPostWrapper className={addAllClasses.join(\" \")} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n              <GatsbyImage\n                image={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />            \n          </Link>\n        </PostPreview>\n      )}\n\n      <PostDetails>\n        {category && (\n          <PostCategory className=\"post_category\">\n          <Link\n            to={`/categories/${_.kebabCase(category.alias)}/`}\n          >{`${category.name}`}</Link>\n        </PostCategory>\n        )}\n        <PostTitle className=\"post_title\">\n          <Link to={url}>{title}</Link>\n        </PostTitle>\n        <PostMeta>\n          {tags == null ? null : (\n            <PostTags className=\"post_tags\">\n              {tags.slice(0, 2).map((tag: string, index: number) => (\n                <Link\n                  key={index}\n                  to={`/tags/${_.kebabCase(tag)}/`}\n                >{`#${tag}`}</Link>\n              ))}\n            </PostTags>\n          )}\n        </PostMeta>\n      </PostDetails>\n    </FeaturedPostWrapper>\n  )\n}\n\nFeaturedPost.defaultProps = {\n  imageType: \"fluid\",\n}\n\nexport default FeaturedPost\n","import styled from \"styled-components\"\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const PostCardModernWrapper = styled.div`\n  position: relative;\n`\n\nexport const PostPreview = styled.div`\n  margin-bottom: 30px;\n  position: relative;\n  min-height: 150px;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`\n\nexport const PostDetails = styled.div``\n\nexport const PostDate = styled.div`\n  position: absolute;\n  width: 75px;\n  height: 75px;\n  top: 30px;\n  left: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 30px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`\n\nexport const PostCategory = styled.div`\n  position: absolute;\n  width: 200px;\n  height: 30px;\n  top: 30px;\n  right: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`\n\nexport const PostTitle = styled.h2`\n  font-size: 21px;\n  font-weight: 700;\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  font-family: ${themeGet(\"fontFamily.0\")};\n  a {\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  }\n  @media (max-width: 1200px) {\n    font-size: 20px;\n  }\n  @media (max-width: 990px) {\n    font-size: 19px;\n  }\n  @media (max-width: 575px) {\n    font-size: 18px;\n  }\n`\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet(\"fontSizes.3\", \"15\")}px;\n  color: ${themeGet(\"textColor\", \"#292929\")};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-bottom: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#D10068\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport {\n  PostCardModernWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostCategory,\n  PostTitle,\n  Excerpt,\n  PostTags,\n} from \"./postCardModern.style\"\n\ninterface PostCardModernProps {\n  image?: any\n  title: string\n  description?: string\n  url: string\n  date?: string\n  category: any\n  tags?: []\n  className?: string\n  imageType?: \"fixed\" | \"fluid\"\n  placeholderBG?: string\n}\n\nconst PostCardModern: React.FunctionComponent<PostCardModernProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  category,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = [\"post_card_modern\"]\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className)\n  }\n\n  return (\n    <PostCardModernWrapper className={addAllClasses.join(\" \")} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n              <GatsbyImage\n                image={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n          </Link>\n          {date && (\n            <PostDate\n              dangerouslySetInnerHTML={{\n                __html: date,\n              }}\n              className=\"post_date\"\n            />\n          )}\n          {category && (\n            <PostCategory\n              dangerouslySetInnerHTML={{\n                __html: category.name,\n              }}\n              className=\"post_category\"\n            />\n          )}\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {tags == null ? null : (\n          <PostTags className=\"post_tags\">\n            {tags.map((tag: string, index: number) => (\n              <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                {`#${tag}`}\n              </Link>\n            ))}\n          </PostTags>\n        )}\n        <PostTitle className=\"post_title\">\n          <Link to={url}>{title}</Link>\n        </PostTitle>\n        {description && (\n          <Excerpt\n            dangerouslySetInnerHTML={{\n              __html: description,\n            }}\n            className=\"excerpt\"\n          />\n        )}\n      </PostDetails>\n    </PostCardModernWrapper>\n  )\n}\n\nPostCardModern.defaultProps = {\n  imageType: \"fluid\",\n}\n\nexport default PostCardModern\n","import styled from \"styled-components\"\n\nconst PersonalBlogWrapper = styled.div``\n\nexport default PersonalBlogWrapper\n","import styled from \"styled-components\"\n\nconst BlogPostsWrapper = styled.div`\n  margin: 0 auto;\n  padding-top: 120px;\n  position: relative;\n  @media (min-width: 991px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n`\nexport const PostRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -20px;\n  margin-bottom: 30px;\n  @media (max-width: 990px) {\n    margin-bottom: 20px;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 10px;\n  }\n`\n\nexport const PostGrid = styled.div`\n  flex: 0 0 50%;\n  max-width: 50%;\n  padding: 0 20px;\n  margin-bottom: 90px;\n  @media (max-width: 990px) {\n    margin-bottom: 70px;\n  }\n  @media (max-width: 767px) {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 50px;\n  }\n`\n\nexport const SeeMore = styled.div`\n  text-align: center;\n`\n\nexport default BlogPostsWrapper\n","import * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport Button from \"~/components/Button/Button\"\nimport PostCardModern from \"~/components/PostCardModern/postCardModern\"\nimport _ from 'lodash'\nimport Categories from '~/utils/CategoryConstants'\nimport BlogPostsWrapper, { PostRow, PostGrid, SeeMore } from \"./style\"\n\ntype PostsProps = {}\n\nconst Posts: React.FunctionComponent<PostsProps> = () => {\n  const Data = useStaticQuery(graphql`\n    query {\n      allMdx(\n        filter: {\n          frontmatter: {\n            templateKey: {eq: \"article\"},\n            published: {eq: true}\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 6\n      ) {\n        totalCount\n        edges {\n          node {\n            excerpt(pruneLength: 200)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\n              title\n              description\n              category\n              tags\n              cover {\n                childImageSharp {\n                  gatsbyImageData(\n                    width: 570\n                    height: 370\n                    quality: 100\n                  )\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const Posts = Data.allMdx.edges\n\n  return (\n    <BlogPostsWrapper>\n      <PostRow>\n        {Posts.map(({ node }: any) => {\n          const title = node.frontmatter.title || node.fields.slug\n          const categoryInfo =  _.get(Categories, node.frontmatter.category)\n          //Random Placeholder Color\n          const placeholderColors = [\n            \"#55efc4\",\n            \"#81ecec\",\n            \"#74b9ff\",\n            \"#a29bfe\",\n            \"#ffeaa7\",\n            \"#fab1a0\",\n            \"#e17055\",\n            \"#0984e3\",\n            \"#badc58\",\n            \"#c7ecee\",\n          ]\n          const setColor =\n            placeholderColors[\n              Math.floor(Math.random() * placeholderColors.length)\n            ]\n\n          return (\n            <PostGrid key={node.fields.slug}>\n              <PostCardModern\n                key={node.fields.slug}\n                title={title}\n                image={\n                  node.frontmatter.cover == null\n                    ? null\n                    : node.frontmatter.cover.childImageSharp.gatsbyImageData\n                }\n                url={node.fields.slug}\n                description={node.excerpt}\n                date={node.frontmatter.date}\n                category={categoryInfo}\n                tags={node.frontmatter.tags}\n                placeholderBG={setColor}\n              />\n            </PostGrid>\n          )\n        })}\n      </PostRow>\n      <SeeMore>\n        <Link to=\"page/1\">\n          <Button title=\"See more\" type=\"submit\" />\n        </Link>\n      </SeeMore>\n    </BlogPostsWrapper>\n  )\n}\n\nexport default Posts\n","export default __webpack_public_path__ + \"static/banner-bg-d621e9d82003114fc61280ae66ae5d73.png\";","import styled from \"styled-components\"\nimport { themeGet } from '@styled-system/theme-get';\nimport BannerBG from \"~/images/banner-bg.png\"\n\nexport const BannerWrapper = styled.div`\n  position: relative;\n  padding: 90px 0;\n  background-color: #d96233;\n  background-image: url(${BannerBG});\n  background-size: cover;\n  background-position: center;\n  min-height: 870px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 1500px) {\n    min-height: 700px;\n    padding: 80px 0;\n  }\n\n  @media (max-width: 990px) {\n    min-height: 600px;\n    padding: 60px 0;\n  }\n\n  @media (max-width: 767px) {\n    min-height: 300px;\n    padding: 40px 0;\n  }\n`\n\nexport const BannerInner = styled.div`\n  margin: 0 auto;\n  width: 100%;\n\n  @media (min-width: 991px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1170px;\n  }\n\n  @media (max-width: 990px) {\n    padding-left: 45px;\n  }\n\n  @media (max-width: 767px) {\n    padding-left: 25px;\n    padding-right: 25px;\n  }\n`\n\nexport const FeaturePosts = styled.div`\n  width: 460px;\n  max-width: 100%;\n  background-color: #fff;\n  border-radius: 6px;\n  padding: 45px;\n  @media (max-width: 990px) {\n    width: 400px;\n  }\n\n  @media (max-width: 767px) {\n    padding: 25px;\n  }\n\n  .featured_post {\n    margin-bottom: 30px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n`\n\nexport const Title = styled.div`\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  font-size: 15px;\n  font-weight: 500;\n  font-family: ${themeGet(\"fontFamily.0\", \"'Fira Sans',sans-serif\")};\n  letter-spacing: 0.17em;\n  position: relative;\n  margin-bottom: 30px;\n\n  &:after {\n    content: \"\";\n    width: 80px;\n    height: 1px;\n    background: #292929;\n    display: block;\n    margin-top: 8px;\n  }\n`\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport FeaturePost from \"~/components/FeaturePost/featurePost\"\nimport _ from 'lodash'\nimport Categories from '~/utils/CategoryConstants'\nimport { BannerWrapper, BannerInner, FeaturePosts, Title } from \"./style\"\n\ntype BannerProps = {}\n\nconst Banner: React.FunctionComponent<BannerProps> = () => {\n  const Data = useStaticQuery(graphql`\n    query {\n      allMdx(\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 5\n        filter: { \n          frontmatter: { \n            tags: { eq: \"featured\" },\n            published: {eq: true}\n          } \n        }\n      ) {\n        totalCount\n        edges {\n          node {\n            excerpt(pruneLength: 300)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\n              title\n              description\n              category\n              tags\n              cover {\n                childImageSharp {\n                  gatsbyImageData(\n                    width: 90\n                    height: 90\n                    quality: 100\n                  )                  \n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const Posts = Data.allMdx.edges\n\n  return (\n    <BannerWrapper>\n      <BannerInner>\n        <FeaturePosts>\n          <Title>Featured Posts</Title>\n          {Posts.map(({ node }: any) => {\n            const title = node.frontmatter.title || node.fields.slug\n            const categoryInfo =  _.get(Categories, node.frontmatter.category)\n\n            //Random Placeholder Color\n            const placeholderColors = [\n              \"#55efc4\",\n              \"#81ecec\",\n              \"#74b9ff\",\n              \"#a29bfe\",\n              \"#ffeaa7\",\n              \"#fab1a0\",\n              \"#e17055\",\n              \"#0984e3\",\n              \"#badc58\",\n              \"#c7ecee\",\n            ]\n            const setColor =\n              placeholderColors[\n                Math.floor(Math.random() * placeholderColors.length)\n              ]\n\n            return (\n              <FeaturePost\n                key={node.fields.slug}\n                title={title}\n                image={\n                  node.frontmatter.cover == null\n                    ? null\n                    : node.frontmatter.cover.childImageSharp.gatsbyImageData\n                }\n                url={node.fields.slug}\n                category={categoryInfo}\n                tags={node.frontmatter.tags}\n                placeholderBG={setColor}\n              />\n            )\n          })}\n        </FeaturePosts>\n      </BannerInner>\n    </BannerWrapper>\n  )\n}\n\nexport default Banner\n","import * as React from \"react\"\nimport PersonalBlogWrapper from \"./style\"\nimport Posts from \"./Posts\"\nimport Banner from \"./Banner\"\n\ntype PersonalBlogProps = {}\n\nconst PersonalBlog: React.FunctionComponent<PersonalBlogProps> = ({\n  ...props\n}) => {\n  return (\n    <PersonalBlogWrapper {...props}>\n      <Banner />\n      <Posts />\n    </PersonalBlogWrapper>\n  )\n}\n\nexport default PersonalBlog\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"~/components/layout\"\nimport PersonalBlog from \"~/containers/HomePage\"\nimport SEO from \"~/components/seo\"\n\nconst PersonalBlogPage = (props: any) => {\n  const { data } = props\n\n  return (\n    <Layout>\n      <SEO\n        title=\"2much2learn | Blog\"\n        description={data.site.siteMetadata.description}\n      />\n      <PersonalBlog />\n    </Layout>\n  )\n}\n\nexport default PersonalBlogPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`\n"],"names":["FeaturedPostWrapper","styled","PostPreview","PostDetails","PostTitle","themeGet","PostMeta","PostCategory","PostTags","FeaturedPost","image","title","url","category","tags","className","placeholderBG","imageType","props","addAllClasses","push","join","Link","to","G","alt","backgroundColor","alias","name","slice","map","tag","index","key","defaultProps","PostCardModernWrapper","PostDate","Excerpt","PostCardModern","description","date","dangerouslySetInnerHTML","__html","BlogPostsWrapper","PostRow","PostGrid","SeeMore","Posts","useStaticQuery","allMdx","edges","node","frontmatter","fields","slug","categoryInfo","Categories","placeholderColors","setColor","Math","floor","random","length","cover","childImageSharp","gatsbyImageData","excerpt","Button","type","BannerWrapper","BannerBG","BannerInner","FeaturePosts","Title","data","site","siteMetadata"],"sourceRoot":""}