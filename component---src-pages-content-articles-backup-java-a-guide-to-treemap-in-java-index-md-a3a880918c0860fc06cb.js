(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{M20g:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",(function(){return s})),n.d(a,"default",(function(){return m}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var t=n("7ljp");var s={templateKey:"article",published:!1,displayComments:!0,showAuthorInfo:!1,author:"narramadan",title:"A Guide to TreeMap in Java",description:"Detailed article on exploring in and out of TreeMap implementation of Map interface from Java Collections Framework(JCF).",date:"2019-11-06T23:46:37.121Z",updated:"2019-11-06T23:46:37.121Z",cover:"../../../images/blog-banners/Java-banner-1200x690.png",category:"java",tags:["java","map","featured"]},c={_frontmatter:s};function m(e){var a=e.components,n=function(e,a){if(null==e)return{};var n,t,s={},c=Object.keys(e);for(t=0;t<c.length;t++)n=c[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,["components"]);return Object(t.mdx)("wrapper",Object.assign({},c,n,{components:a,mdxType:"MDXLayout"}),Object(t.mdx)("h2",null,"Intro"),Object(t.mdx)("p",null,"In this article, we are going to explore TreeMap implementation of Map interface from Java Collections Framework(JCF)."),Object(t.mdx)("p",null,"TreeMap is a map implementation that keeps its entries sorted according to the natural ordering of its keys or better still using a comparator if provided by the user at construction time."),Object(t.mdx)("p",null,"Previously, we have covered HashMap and LinkedHashMap implementations and we will realize that there is quite a bit of information about how these classes work that is similar."),Object(t.mdx)("p",null,"The mentioned articles are highly recommended reading before going forth with this one."),Object(t.mdx)("h2",null,"Default Sorting in TreeMap"),Object(t.mdx)("p",null,"By default, TreeMap sorts all its entries according to their natural ordering. For an integer, this would mean ascending order and for strings, alphabetical order."),Object(t.mdx)("p",null,"Let’s see the natural ordering in a test:"),Object(t.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(t.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token annotation punctuation"}),"@Test"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"public")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"givenTreeMap_whenOrdersEntriesNaturally_thenCorrect"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," map ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n \n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[1, 2, 3, 4, 5]"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"keySet"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(t.mdx)("p",null,"Notice that we placed the integer keys in a non-orderly manner but on retrieving the key set, we confirm that they are indeed maintained in ascending order. This is the natural ordering of integers."),Object(t.mdx)("p",null,"Likewise, when we use strings, they will be sorted in their natural order, i.e. alphabetically:"),Object(t.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(t.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token annotation punctuation"}),"@Test"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"public")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"givenTreeMap_whenOrdersEntriesNaturally_thenCorrect2"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," map ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"c"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"b"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"a"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"e"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"d"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n \n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[a, b, c, d, e]"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"keySet"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(t.mdx)("h2",null,"Custom Sorting in TreeMap"),Object(t.mdx)("p",null,"If we’re not satisfied with the natural ordering of TreeMap, we can also define our own rule for ordering by means of a comparator during construction of a tree map."),Object(t.mdx)("p",null,"In the example below, we want the integer keys to be ordered in descending order:"),Object(t.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(t.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token annotation punctuation"}),"@Test"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"public")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"givenTreeMap_whenOrdersEntriesByComparator_thenCorrect"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," map ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," \n      ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Comparator"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"reverseOrder"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n         \n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[5, 4, 3, 2, 1]"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"keySet"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(t.mdx)("p",null,"A hash map does not guarantee the order of keys stored and specifically does not guarantee that this order will remain the same over time, but a tree map guarantees that the keys will always be sorted according to the specified order."),Object(t.mdx)("h2",null,"Importance of TreeMap Sorting"),Object(t.mdx)("p",null,"We now know that TreeMap stores all its entries in sorted order. Because of this attribute of tree maps, we can perform queries like; find “largest”, find “smallest”, find all keys less than or greater than a certain value, etc."),Object(t.mdx)("p",null,"The code below only covers a small percentage of these cases:"),Object(t.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(t.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token annotation punctuation"}),"@Test"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"public")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"givenTreeMap_whenPerformsQueries_thenCorrect"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," map ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"val"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n         \n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Integer")," highestKey ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"lastKey"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Integer")," lowestKey ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"firstKey"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Set"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," keysLessThan3 ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"headMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"keySet"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Set"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," keysGreaterThanEqTo3 ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," map",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"tailMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"keySet"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n \n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," highestKey",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Integer"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," lowestKey",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[1, 2]"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," keysLessThan3",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"assertEquals"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"[3, 4, 5]"'),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," keysGreaterThanEqTo3",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(t.mdx)("h2",null,"Internal Implementation of TreeMap"),Object(t.mdx)("p",null,"TreeMap implements NavigableMap interface and bases it’s internal working on the principles of red-black trees:"),Object(t.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(t.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"public")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"class")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"TreeMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"K"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"V"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"extends")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"AbstractMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"K"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"V"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),"\n  ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"implements")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"NavigableMap"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"K"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"V"),Object(t.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Cloneable"),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," java",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"io",Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(t.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Serializable")))),Object(t.mdx)("p",null,"The principle of red-black trees is beyond the scope of this article, however, there are key things to remember in order to understand how they fit into TreeMap."),Object(t.mdx)("p",null,"First of all, a red-black tree is a data structure that consists of nodes; picture an inverted mango tree with its root in the sky and the branches growing downward. The root will contain the first element added to the tree."),Object(t.mdx)("p",null,"The rule is that starting from the root, any element in the left branch of any node is always less than the element in the node itself. Those on the right are always greater. What defines greater or less than is determined by the natural ordering of the elements or the defined comparator at construction as we saw earlier."),Object(t.mdx)("p",null,"This rule guarantees that the entries of a treemap will always be in sorted and predictable order."),Object(t.mdx)("p",null,"Secondly, a red-black tree is a self-balancing binary search tree. This attribute and the above guarantee that basic operations like search, get, put and remove take logarithmic time O(log n)."),Object(t.mdx)("p",null,"Being self-balancing is key here. As we keep inserting and deleting entries, picture the tree growing longer on one edge or shorter on the other."),Object(t.mdx)("p",null,"This would mean that an operation would take a shorter time on the shorter branch and longer time on the branch which is furthest from the root, something we would not want to happen."),Object(t.mdx)("p",null,"Therefore, this is taken care of in the design of red-black trees. For every insertion and deletion, the maximum height of the tree on any edge is maintained at O(log n) i.e. the tree balances itself continuously."),Object(t.mdx)("p",null,"Just like hash map and linked hash map, a tree map is not synchronized and therefore the rules for using it in a multi-threaded environment are similar to those in the other two map implementations."),Object(t.mdx)("h2",null,"Choosing the Right Map"),Object(t.mdx)("p",null,"Having looked at ",Object(t.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"HashMap")," and ",Object(t.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"LinkedHashMap")," implementations previously and now TreeMap, it is important to make a brief comparison between the three to guide us on which one fits where."),Object(t.mdx)("p",null,"A hash map is good as a general purpose map implementation that provides rapid storage and retrieval operations. However, it falls short because of its chaotic and unorderly arrangement of entries."),Object(t.mdx)("p",null,"This causes it to perform poorly in scenarios where there is a lot of iteration as the entire capacity of the underlying array affects traversal other than just the number of entries."),Object(t.mdx)("p",null,"A linked hash map possesses the good attributes of hash maps and adds order to the entries. It performs better where there is a lot of iteration because only the number of entries is taken into account regardless of capacity."),Object(t.mdx)("p",null,"A tree map takes ordering to the next level by providing complete control over how the keys should be sorted. On the flip side, it offers worse general performance than the other two alternatives."),Object(t.mdx)("p",null,"We could say a linked hash map reduces the chaos in the ordering of a hash map without incurring the performance penalty of a tree map."),Object(t.mdx)("h2",null,"Conclusion"),Object(t.mdx)("p",null,"In this article, we have explored Java TreeMap class and its internal implementation. Since it is the last in a series of common Map interface implementations, we also went ahead to briefly discuss where it fits best in relation to the other two."),Object(t.mdx)("p",null,"The full source code for all the examples used in this article can be found in the GitHub project."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-content-articles-backup-java-a-guide-to-treemap-in-java-index-md-a3a880918c0860fc06cb.js.map