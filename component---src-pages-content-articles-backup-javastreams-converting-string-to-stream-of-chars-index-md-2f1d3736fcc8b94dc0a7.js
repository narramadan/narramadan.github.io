"use strict";(self.webpackChunk_2much2learn_com=self.webpackChunk_2much2learn_com||[]).push([[3122,7532,4453,2679,8673,325,5841,4911,6699,6036,5824],{78035:function(a,e,n){n.r(e),n.d(e,{_frontmatter:function(){return o},default:function(){return r}});var t=n(63366),s=(n(67294),n(64983)),m=["components"],o={templateKey:"article",published:!1,displayComments:!0,showAuthorInfo:!1,author:"narramadan",title:"Converting String to Stream of chars",description:"Converting String to Stream of chars",date:"2020-01-05T23:46:37.121Z",updated:"2020-01-05T23:46:37.121Z",cover:"../../../images/blog-banners/microservice-banner-1200x690.png",category:"javastreams",tags:["java","streams","featured"]},c={_frontmatter:o};function r(a){var e=a.components,n=(0,t.Z)(a,m);return(0,s.mdx)("wrapper",Object.assign({},c,n,{components:e,mdxType:"MDXLayout"}),(0,s.mdx)("h2",{id:"intro"},"Intro"),(0,s.mdx)("p",null,"Java 8 introduced the Stream API, with functional-like operations for processing sequences. If you want to read more about it, have a look at this article."),(0,s.mdx)("p",null,"In this quick article, we’ll see how to convert a ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"String")," to a ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream")," of single characters."),(0,s.mdx)("h2",{id:"conversion-using-chars"},"Conversion Using chars()"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"String")," API has a new method – ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"chars()")," – with which we can obtain an instance of ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream")," from a String object. This simple API returns an instance of IntStream from the input String."),(0,s.mdx)("p",null,"Simply put, ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"IntStream")," contains an integer representation of the characters from the ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"String")," object:"),(0,s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},(0,s.mdx)("pre",{parentName:"div",className:"language-java"},(0,s.mdx)("code",{parentName:"pre",className:"language-java"},(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"String")," testString ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," ",(0,s.mdx)("span",{parentName:"code",className:"token string"},'"String"'),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";"),"\n",(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"IntStream")," intStream ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," testString",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"chars"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";")))),(0,s.mdx)("p",null,"It’s possible to work with the integer representation of the characters without converting them to their ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Character")," equivalent. This can lead to some minor performance gains, as there will be no need to box each integer into a ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Character")," object."),(0,s.mdx)("p",null,"However, if we’re to display the characters for reading, we need to convert the integers to the human-friendly ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Character")," form:"),(0,s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},(0,s.mdx)("pre",{parentName:"div",className:"language-java"},(0,s.mdx)("code",{parentName:"pre",className:"language-java"},(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"Stream"),(0,s.mdx)("span",{parentName:"code",className:"token generics"},(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},"<"),(0,s.mdx)("span",{parentName:"span",className:"token class-name"},"Character"),(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},">"))," characterStream ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," testString",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"chars"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"mapToObj"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),"c ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"->")," ",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token keyword"},"char"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")")," c",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";")))),(0,s.mdx)("h2",{id:"conversion-using-codepoints"},"Conversion Using codePoints()"),(0,s.mdx)("p",null,"Alternatively, we can use the ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"codePoints()")," method to get an instance of ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"IntStream")," from a ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"String"),". The advantage of using this API is that Unicode supplementary characters can be handled effectively."),(0,s.mdx)("p",null,"Supplementary characters are represented by Unicode surrogate pairs and will be merged into a single codepoint. This way we can correctly process (and display) any Unicode symbol:"),(0,s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},(0,s.mdx)("pre",{parentName:"div",className:"language-java"},(0,s.mdx)("code",{parentName:"pre",className:"language-java"},(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"IntStream")," intStream1 ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," testString",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"codePoints"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";")))),(0,s.mdx)("p",null,"We need to map the returned ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"IntStream")," to ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream<Character>")," to display it to users:"),(0,s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},(0,s.mdx)("pre",{parentName:"div",className:"language-java"},(0,s.mdx)("code",{parentName:"pre",className:"language-java"},(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"Stream"),(0,s.mdx)("span",{parentName:"code",className:"token generics"},(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},"<"),(0,s.mdx)("span",{parentName:"span",className:"token class-name"},"Character"),(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},">"))," characterStream2 \n  ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," testString",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"codePoints"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"mapToObj"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),"c ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"->")," ",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token keyword"},"char"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")")," c",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";")))),(0,s.mdx)("h2",{id:"conversion-to-a-stream-of-single-character-strings"},"Conversion to a Stream of Single Character Strings"),(0,s.mdx)("p",null,"So far, we’ve been able to get a ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream")," of characters; what if we want a Stream of single character ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Strings")," instead?"),(0,s.mdx)("p",null,"Just as specified earlier in the article, we’ll use either the ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"codePoints()")," or ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"chars()")," methods to obtain an instance of IntStream that we can now map to ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream<String>"),"."),(0,s.mdx)("p",null,"The mapping process involves converting the integer values to their respective character equivalents first."),(0,s.mdx)("p",null,"Then we can use String.valueOf() or Character.toString() to convert the characters to a String object:"),(0,s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},(0,s.mdx)("pre",{parentName:"div",className:"language-java"},(0,s.mdx)("code",{parentName:"pre",className:"language-java"},(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"Stream"),(0,s.mdx)("span",{parentName:"code",className:"token generics"},(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},"<"),(0,s.mdx)("span",{parentName:"span",className:"token class-name"},"String"),(0,s.mdx)("span",{parentName:"span",className:"token punctuation"},">"))," stringStream ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"=")," testString",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"codePoints"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"mapToObj"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),"c ",(0,s.mdx)("span",{parentName:"code",className:"token operator"},"->")," ",(0,s.mdx)("span",{parentName:"code",className:"token class-name"},"String"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"."),(0,s.mdx)("span",{parentName:"code",className:"token function"},"valueOf"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},"("),(0,s.mdx)("span",{parentName:"code",className:"token keyword"},"char"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")")," c",(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},")"),(0,s.mdx)("span",{parentName:"code",className:"token punctuation"},";")))),(0,s.mdx)("h2",{id:"conclusion"},"Conclusion"),(0,s.mdx)("p",null,"In this quick tutorial, we learn to obtain a stream of Character from a String object by either calling ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"codePoints()")," or ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"chars()")," methods."),(0,s.mdx)("p",null,"This allows us to take full advantage of the ",(0,s.mdx)("code",{parentName:"p",className:"language-text"},"Stream API")," – to conveniently and effectively manipulate characters."),(0,s.mdx)("p",null,"As always, code snippets can be found over on GitHub."))}r.isMDXComponent=!0},63366:function(a,e,n){function t(a,e){if(null==a)return{};var n,t,s={},m=Object.keys(a);for(t=0;t<m.length;t++)n=m[t],e.indexOf(n)>=0||(s[n]=a[n]);return s}n.d(e,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-pages-content-articles-backup-javastreams-converting-string-to-stream-of-chars-index-md-2f1d3736fcc8b94dc0a7.js.map