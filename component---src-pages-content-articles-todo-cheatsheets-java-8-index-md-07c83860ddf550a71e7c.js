(window.webpackJsonp=window.webpackJsonp||[]).push([[59,41,42,43,44,45,46,47,48,51,55,63],{Qncy:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return c})),t.d(a,"default",(function(){return o}));var n=t("zLVn"),s=(t("q1tI"),t("7ljp")),c={templateKey:"article",published:!1,displayComments:!0,showAuthorInfo:!1,author:"narramadan",title:"JAVA 8 - Cheat Sheet",description:"Syntax cheatsheet for Java8",date:"2019-09-15T23:46:37.121Z",updated:"2019-09-15T23:46:37.121Z",cover:"../../../images/blog-banners/cheatsheet-banner-1200x690.png",category:"cheatsheets",tags:["java8","cheatsheets"],keywords:["java8","lamda","lamda expressions","Default Lambda in Java8","Java Time API","Collection API improvements","Concurrency API improvements","Java IO improvements","Functional Interfaces and Lambda Expressions","default and static methods in Interfaces","static methods","forEach()","Java IO improvements"]},m={_frontmatter:c};function o(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(s.mdx)("wrapper",Object.assign({},m,t,{components:a,mdxType:"MDXLayout"}),Object(s.mdx)("h2",{id:"lambda-expression"},"Lambda Expression"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Calculate the double of a"),"\na ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// or simply without type")))),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," b",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," b",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Sum of 2 parameters")))),Object(s.mdx)("p",null,"If the lambda is more than one expression we can use ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"{ }")," and ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"return")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," y",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," sum ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," y",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," avg ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," sum ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," avg",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(s.mdx)("p",null,"A lambda expression cannot stand alone in Java, it need to be associated to a functional interface."),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"interface")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"MyMath")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"getDoubleOf"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\t\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"MyMath")," d ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// associated to the interface"),"\nd",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"getDoubleOf"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// is 8")))),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"All examples with “list” use :"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"List"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," list ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Bohr"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Darwin"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Galilei"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Tesla"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Einstein"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Newton"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")))),Object(s.mdx)("h2",{id:"collections"},"Collections"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"sort")," ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sort(list, comparator)")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"list",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," b",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-")," b",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\nlist",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Comparator"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"comparing"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// same"),"\nlist",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sort"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Comparator"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"comparing"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// same"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> [Bohr, Tesla, Darwin, Newton, Galilei, Einstein]")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"removeIf")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"list",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"removeIf"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"w ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," w",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"6"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> [Darwin, Galilei, Einstein, Newton]")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"merge"),"\n",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"merge(key, value, remappingFunction)")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Map"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," names ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"HashMap"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nnames",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Albert"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Ein?"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nnames",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Marie"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Curie"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nnames",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"put"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Max"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Plank"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Value "Albert" exists'),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// {Marie=Curie, Max=Plank, Albert=Einstein}"),"\nnames",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"merge"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Albert"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"stein"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"old",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," val",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," old",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"substring"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," val",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Value "Newname" don\'t exists'),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// {Marie=Curie, Newname=stein, Max=Plank, Albert=Einstein}"),"\nnames",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"merge"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Newname"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"stein"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"old",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," val",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," old",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"substring"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," val",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("h2",{id:"method-expressions-classstaticmethod"},"Method Expressions Class::staticMethod"),Object(s.mdx)("p",null,"Allows to reference methods (and constructors) without executing them"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Lambda Form:"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"getPrimes"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"numbers",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," a ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"StaticMethod"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isPrime"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"a",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Method Reference:"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"getPrimes"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"numbers",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"StaticMethod"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isPrime"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("table",null,Object(s.mdx)("thead",{parentName:"table"},Object(s.mdx)("tr",{parentName:"thead"},Object(s.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Method Reference"),Object(s.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Lambda Form"))),Object(s.mdx)("tbody",{parentName:"table"},Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"StaticMethod::isPrime")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"n -> StaticMethod.isPrime(n)"))),Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"String::toUpperCase")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"(String w) -> w.toUpperCase()"))),Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"String::compareTo")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"(String s, String t) -> s.compareTo(t)"))),Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"System.out::println")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"x -> System.out.println(x)"))),Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"Double::new")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"n -> new Double(n)"))),Object(s.mdx)("tr",{parentName:"tbody"},Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"String[]::new")),Object(s.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(s.mdx)("code",Object.assign({parentName:"td"},{className:"language-text"}),"(int n) -> new String[n]"))))),Object(s.mdx)("h2",{id:"streams"},"Streams"),Object(s.mdx)("p",null,"Similar to collections, but"),Object(s.mdx)("ul",null,Object(s.mdx)("li",{parentName:"ul"},"They don’t store their own data"),Object(s.mdx)("li",{parentName:"ul"},"The data comes from elsewhere (collection, file, db, web, …)"),Object(s.mdx)("li",{parentName:"ul"},Object(s.mdx)("em",{parentName:"li"},"immutable")," (produce new streams)"),Object(s.mdx)("li",{parentName:"ul"},Object(s.mdx)("em",{parentName:"li"},"lazy")," (only computes what is necessary !)")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Will compute just 3 "filter"'),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," longNames ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," list\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"filter"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"8"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"limit"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Create a new stream")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," stream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"7"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"11"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," stream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Jazz"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Blues"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"Rock"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," stream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"myArray",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// or from an array"),"\nlist",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// or from a list"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Infinit stream [0; inf["),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," integers ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"iterate"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collecting results")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Collect into an array (::new is the constructor reference)"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," myArray ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toArray"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Collect into a List or Set"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"List"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," myList ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"collect"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toList"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Set"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," mySet ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"collect"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toSet"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Collect into a String"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String")," str ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," list",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"collect"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"joining"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'", "'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"map")," ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map(mapper)"),"\nApplying a function to each element"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Apply "toLowerCase" for each element'),"\nres ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"map"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"w ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," w",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toLowerCase"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nres ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"map"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toLowerCase"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> bohr darwin galilei tesla einstein newton"),"\n\nres ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"map"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> 2 3 4 5 6")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"filter")," ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"filter(predicate)"),"\nRetains elements that match the predicate"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Filter elements that begin with "E"'),"\nres ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"filter"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"substring"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"equals"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"E"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> Einstein"),"\n\nres ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"filter"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> 1 2")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"reduce"),"\nReduce the elements to a single value"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String")," reduced ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream\n\t",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"reduce"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"acc",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," el",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," acc ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"|"')," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," el",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> |Bohr|Darwin|Galilei|Tesla|Einstein|Newton")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"limit")," ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"limit(maxSize)"),"\nThe n first elements"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"limit"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> Bohr Darwin Galilei")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"skip"),"\nDiscarding the first n elements"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," strem",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"skip"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// skip Bohr and Darwin"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> Galilei Tesla Einstein Newton")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"distinct"),"\nRemove duplicated elemetns"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"distinct"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> 1 0")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"sorted"),"\nSort elements (must be ",Object(s.mdx)("em",{parentName:"p"},"Comparable"),")"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sorted"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> Bohr Darwin Einstein Galilei Newton Tesla ")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"allMatch")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// Check if there is a "e" in each elements'),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"boolean")," res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," words",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"allMatch"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"n ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"contains"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"e"'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,"anyMatch: Check if there is a “e” in an element\nnoneMatch: Check if there is no “e” in elements"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"parallel"),"\nReturns an equivalent stream that is parallel"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"findAny"),"\nfaster than findFirst on parallel streams"),Object(s.mdx)("h3",{id:"primitive-type-streams"},"Primitive-Type Streams"),Object(s.mdx)("p",null,"Wrappers (like ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Stream<Integer>"),") are inefficients. It requires a lot of unboxing and boxing for each element. Better to use ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"IntStream"),", ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"DoubleStream"),", etc."),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Creation")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"IntStream")," stream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"IntStream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"7"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nstream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"IntStream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"myArray",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// from an array"),"\nstream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"IntStream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"range"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"80"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// range from 5 to 80"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Random")," gen ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Random"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"IntStream")," rand ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"gen"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"9"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// stream of randoms")))),Object(s.mdx)("p",null,"Use ",Object(s.mdx)("em",{parentName:"p"},"mapToX")," (mapToObj, mapToDouble, etc.) if the function yields Object, double, etc. values."),Object(s.mdx)("h3",{id:"grouping-results"},"Grouping Results"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collectors.groupingBy")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Groupe by length"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Map"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Integer"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"List"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," groups ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream\n\t",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"collect"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"groupingBy"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"w ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," w",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"//> 4=[Bohr], 5=[Tesla], 6=[Darwin, Newton], ...")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collectors.toSet")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Same as before but with Set"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),".")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"groupingBy"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"\n\tw ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," w",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"substring"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toSet"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),".")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collectors.counting"),"\nCount the number of values in a group"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collectors.summing__"),"\n",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"summingInt"),", ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"summingLong"),", ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"summingDouble")," to sum group values"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Collectors.averaging__"),"\n",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"averagingInt"),", ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"averagingLong"),", … "),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Average length of each element of a group"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Collectors"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"averagingInt"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")))),Object(s.mdx)("p",null,Object(s.mdx)("em",{parentName:"p"},"PS"),": Don’t forget Optional (like ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Map<T, Optional<T>>"),") with some Collection methods (like ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Collectors.maxBy"),")."),Object(s.mdx)("h3",{id:"parallel-streams"},"Parallel Streams"),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Creation")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," parStream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," list",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"parallelStream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," parStream ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Stream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"myArray",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"parallel"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"unordered"),"\nCan speed up the ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"limit")," or ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"distinct")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"parallelStream"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"unordered"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"distinct"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,Object(s.mdx)("em",{parentName:"p"},"PS"),": Work with the streams library. Eg. use ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"filter(x -> x.length() < 9)")," instead of a ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"forEach")," with an ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"if"),"."),Object(s.mdx)("h2",{id:"optional"},"Optional"),Object(s.mdx)("p",null,"In Java, it is common to use null to denote absence of result.\nProblems when no checks: ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NullPointerException"),"."),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Optional<String> contains a string or nothing"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Optional"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," res ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," stream\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"filter"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"w ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," w",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"10"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"findFirst"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// length of the value or "" if nothing'),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"int")," length ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," res",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"orElse"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""'),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"length"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// run the lambda if there is a value"),"\nres",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"ifPresent"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"->")," results",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"add"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(s.mdx)("p",null,"Return an Optional"),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Optional"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Double"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"squareRoot"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"double")," x",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),">=")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Optional"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"of"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Math"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sqrt"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"x",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n   ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"else")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Optional"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"empty"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Note on inferance limitations")),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"interface")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Pair"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"A"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"B"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"))," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"A")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"first"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"B")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"second"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(s.mdx)("p",null,"A steam of type ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Stream<Pair<String, Long>>")," :"),Object(s.mdx)("ul",null,Object(s.mdx)("li",{parentName:"ul"},Object(s.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"stream.sorted(Comparator.comparing(Pair::first)) // ok")),Object(s.mdx)("li",{parentName:"ul"},Object(s.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"stream.sorted(Comparator.comparing(Pair::first).thenComparing(Pair::second)) // dont work"))),Object(s.mdx)("p",null,"Java cannot infer type for the ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".comparing(Pair::first)")," part and fallback to Object, on which ",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Pair::first")," cannot be applied."),Object(s.mdx)("p",null,"The required type for the whole expression cannot be propagated through the method call (",Object(s.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".thenComparing"),") and used to infer type of the first part."),Object(s.mdx)("p",null,"Type ",Object(s.mdx)("em",{parentName:"p"},"must")," be given explicitly."),Object(s.mdx)("div",{className:"gatsby-highlight","data-language":"java"},Object(s.mdx)("pre",Object.assign({parentName:"div"},{className:"language-java"}),Object(s.mdx)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"stream",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"sorted"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"\n    ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Comparator"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token generics"}),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Pair"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"<"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"Long"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," ",Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token class-name"}),"String"),Object(s.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),">")),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"comparing"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Pair"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"first"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"thenComparing"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Pair"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"::"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"second"),Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(s.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ok")))),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"This cheat sheet was based on the lecture of Cay Horstmann\n",Object(s.mdx)("a",Object.assign({parentName:"p"},{href:"http://horstmann.com/heig-vd/spring2015/poo/"}),"http://horstmann.com/heig-vd/spring2015/poo/")))}o.isMDXComponent=!0},zLVn:function(e,a,t){"use strict";function n(e,a){if(null==e)return{};var t,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}t.d(a,"a",(function(){return n}))}}]);
//# sourceMappingURL=component---src-pages-content-articles-todo-cheatsheets-java-8-index-md-07c83860ddf550a71e7c.js.map