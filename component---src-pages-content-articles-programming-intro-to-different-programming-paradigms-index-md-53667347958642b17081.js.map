{"version":3,"file":"component---src-pages-content-articles-programming-intro-to-different-programming-paradigms-index-md-53667347958642b17081.js","mappings":"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","sources":["webpack://2much2learn.com/./src/pages/content/articles/programming/intro-to-different-programming-paradigms/index.md","webpack://2much2learn.com/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"templateKey\": \"article\",\n  \"published\": true,\n  \"displayComments\": true,\n  \"showAuthorInfo\": false,\n  \"showSideBar\": true,\n  \"author\": \"narramadan\",\n  \"title\": \"A brief introduction to different Programming Paradigms\",\n  \"description\": \"A brief introduction to different Programming Paradigms that are to be known to every developer which will help them to choose the right one for their use case implementation.\",\n  \"date\": \"2020-02-07T18:46:37.121Z\",\n  \"updated\": \"2020-02-07T18:46:37.121Z\",\n  \"cover\": \"../../../images/blog-banners/programming-paradigm-banner-1200x690.png\",\n  \"category\": \"programming\",\n  \"tags\": [\"Programming\", \"Java\", \"featured\"],\n  \"keywords\": [\"Programming\", \"Paradigm\", \"Programming Paradigm\", \"Functional Programming\", \"Object Oriented Programming\", \"Imperative Programming\", \"Declarative Programming\", \"Functional Reactive Programming\", \"Different programming paradigm in Java\", \"Developers need to know\", \"narra.madan\", \"narramadan\", \"narra.madan@outlook.com\", \"Madan Narra\", \"Narra Madan\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst ExternalLink = makeShortcode(\"ExternalLink\");\nconst ExternalLinksListContainer = makeShortcode(\"ExternalLinksListContainer\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"what-exactly-is-programming-paradigm\"\n    }}>{`What exactly is Programming Paradigm?`}</h2>\n    <p>{`A programming paradigm is a style or way of programming which defines how we think and approach the problems. There can be more than one type programming paradigms. Here is a brief list of the common ones:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Imperative Programming`}</li>\n      <li parentName=\"ul\">{`Functional Programming`}</li>\n      <li parentName=\"ul\">{`Object-oriented Programming`}</li>\n      <li parentName=\"ul\">{`Aspect-oriented Programming`}</li>\n      <li parentName=\"ul\">{`Reactive Programming`}</li>\n      <li parentName=\"ul\">{`Functional Reactive Programming`}</li>\n    </ul>\n    <p>{`There are lots of programming languages that use one or some of these strategies when they are implemented. And that strategy is a paradigm.`}</p>\n    <p>{`Let’s briefly go through each one of these.`}</p>\n    <h3 {...{\n      \"id\": \"imperative-programming\"\n    }}>{`Imperative Programming`}</h3>\n    <p>{`Imperative programming is the style of programming in which there is a sequence of statements that change the state of the program. Control flow in imperative programming is explicit i.e, commands show how the computation takes place, step by step. Each step affects the global state of the computation.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` grandtotal `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`0`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` a `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` b `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`5`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\ngrandtotal `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` a `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`+`}</span>{` b`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Sysout`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`grandtotal`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`Imperative programming says how to do something. As shown above, we can see the state of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`grandtotal`}</code>{` changed from `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{` to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`6`}</code>{` by some series of sequential commands. This makes the programs simpler for a someone to read and write. Imperative programming can be written almost in every programming language.`}</p>\n    <h3 {...{\n      \"id\": \"functional-programming\"\n    }}>{`Functional Programming`}</h3>\n    <p>{`Functional Programming is about avoiding reassigning variables, avoiding mutable data structures, avoiding state and favouring functions all-the-way. It is mainly used to perform mathematical functions or logical operations that doesn’t change the state of variables defined in the program.`}</p>\n    <p>{`Functions implemented should be idempotent by nature i.e, make that same call repeatedly while producing the same result.`}</p>\n    <p>{`Functions are classified as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Pure`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Impure`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Higher Order`}</code>{` Functions.`}</p>\n    <p><strong parentName=\"p\">{`Pure Functions`}</strong></p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`public`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`class`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ObjectWithPureFunction`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`public`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`sum`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` a`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` b`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`return`}</span>{` a `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`+`}</span>{` b`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <p>{`This is an example of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Pure Functions`}</code>{`. As shown above, sum() method/function only depends on the input parameters and will not have any side effects modifying the state of variables that are defined outside of the function.`}</p>\n    <p><strong parentName=\"p\">{`Impure Functions`}</strong></p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`public`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`class`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ObjectWithImpureFunction`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`private`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` value `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`0`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`public`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`add`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`int`}</span>{` nextValue`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`this`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`value `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`+=`}</span>{` nextValue`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`this`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`value`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code></pre></div>\n    <p>{`Notice how `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add()`}</code>{` method uses a instance/member variable to calculate its return value, and it also modifies the state of the member variable, so it has a side effect. This state changing makes this function to be termed as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Impure`}</code>{`.`}</p>\n    <p><strong parentName=\"p\">{`Higher Order Functions`}</strong></p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Higher order functions`}</code>{` are functions that either accept other functions as arguments or returns a function as a result. With the introduction of Lambda expressions in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Java 8`}</code>{`, Java supports higher order functions.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`List`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`String`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` names `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Arrays`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`asList`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"Madan\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"Meenakshi\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"Manya\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Collections`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`sort`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`names`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`first`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` second`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` first`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`length`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`-`}</span>{` second`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`length`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`As shown above, sort function is an example of a Higher order function that accepts a lambda expression. The expression `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`(first, second) -> first.length() - second.length()`}</code>{` is a lambda expression of type `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Comparator<String>`}</code>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`(first, second)`}</code>{` are parameters of the compare method of Comparator.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`first.length() - second.length()`}</code>{` is the function body that compares the length of two names.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`->`}</code>{` is the lambda operator that separates parameters from the body of the lambda.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"object-oriented-programming\"\n    }}>{`Object-oriented Programming`}</h3>\n    <p>{`Object Oriented Programming a.k.a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OOP`}</code>{` is the most popular programming paradigm. It has unique advantages like the modularity of the code and the ability to directly associate real-world business problems in terms of code. It proposes the creation of templates (or classes) which can define the state and behavior of the instances they model. The instances interact with each other by sending them messages via methods.`}</p>\n    <p>{`This programming paradigm defines four principles:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Abstraction`}</code>{` — Process of hiding the implementation details from the user. Оnly the functionality will be provided to the user.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Encapsulation`}</code>{` — Mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Inheritance`}</code>{` — Process where one class acquires the properties (methods and fields) of another. With the use of inheritance the information is made manageable in a hierarchical order.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Polymorphism`}</code>{` — Ability of an object to take on many forms when a parent class reference is used to refer to a child class object.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"aspect-oriented-programming\"\n    }}>{`Aspect-oriented Programming`}</h3>\n    <p>{`Aspect Oriented Programming a.k.a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`AOP`}</code>{` is a programming paradigm that aims to increase `}<em parentName=\"p\">{`modularity`}</em>{` by allowing the `}<em parentName=\"p\">{`separation of cross-cutting concerns`}</em>{`.`}</p>\n    <p>{`It does so by adding additional behaviour to existing code (an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`advice`}</code>{`) without modifying the code itself, instead separately specifying which code is modified via a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pointcut`}</code>{` specification, such as “log all function calls when the function’s name begins with ‘set’“. This allows behaviours that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality.`}</p>\n    <p>{`One can think of AOP as a debugging tool or as a user-level tool. Advice should be reserved for the cases where you cannot get the function changed (user level) or do not want to change the function in production code (debugging).`}</p>\n    <p>{`Standard terminology used in Aspect-oriented programming may include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Cross-cutting concerns`}</code>{` - These are aspects of a program that affect other concerns.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Advice`}</code>{` - These are actions taken for a particular join point.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Pointcut`}</code>{` - These are set of one or more JoinPoint where an advice should be executed.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Aspect`}</code>{` - The combination of the pointcut and the advice is termed an aspect.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reactive-programming\"\n    }}>{`Reactive Programming`}</h3>\n    <p>{`Reactive programming is all about handling `}<em parentName=\"p\">{`asynchronous streams of data`}</em>{`. It is concerned with data streams and the propagation of change.`}</p>\n    <p>{`In reactive programming, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Observables`}</code>{` emit data, and send it to the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`subscribers`}</code>{`. This can be seen as data being `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`PUSHed`}</code>{` in reactive programming, as opposed to data being `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`PULLed`}</code>{` in imperative programming, where you explicitly request data (iterating over collection, requesting data from the DB, etc).`}</p>\n    <p>{`Building blocks of Reactive Programming:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Observables`}</code>{` - Observables are the data source/stream that can emit multiple values, just one, or none. They can also emit errors and can be infinite or finite, in which case they emit their completion event.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Subscribers`}</code>{` - Subscribers `}<strong parentName=\"li\">{`subscribe`}</strong>{` to Observables. They consume/observe the data and also receive the errors and completion events from the Observable.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Operators`}</code>{` - They are used to `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`create`}</code>{`, `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`transform`}</code>{`, `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`filter`}</code>{` or `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`combine`}</code>{` Observables.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`create - timers, ranges, from other data sources`}</li>\n          <li parentName=\"ul\">{`transform - map, buffer, group, scan, etc`}</li>\n          <li parentName=\"ul\">{`filter - filter, distinct, skip, debounce, etc`}</li>\n          <li parentName=\"ul\">{`zip, merge, combine latest, etc`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Schedulers`}</code>{` - It is a mechanism that allows us to easily add threading to our Observables and Subscribers.`}</li>\n    </ul>\n    <p>{`The `}<ExternalLink href=\"https://www.reactivemanifesto.org/\" mdxType=\"ExternalLink\">{`Reactive Manifesto`}</ExternalLink>{` is a document that defines the core principles of reactive programming.`}</p>\n    <p><ExternalLink href=\"https://github.com/ReactiveX/RxJava\" mdxType=\"ExternalLink\">RxJava</ExternalLink> – <ExternalLink href=\"https://github.com/ReactiveX\" mdxType=\"ExternalLink\">Reactive Extensions</ExternalLink> for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</p>\n    <h3 {...{\n      \"id\": \"functional-reactive-programming\"\n    }}>{`Functional Reactive Programming`}</h3>\n    <p>{` Reactive programming, with the concept of Functional programming is termed as functional reactive programming a.k.a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`FRP`}</code>{`.`}</p>\n    <p>{` FRP helps us to think about asynchronous programs (high-level abstractions), makes the flow of your application easier, and improves standard error handling (data structure = less code, less bugs). That is the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reactive`}</code>{` part. The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`functional`}</code>{` part is the reactive extensions. Rx allow you to manipulate and combine streams of events. Together, that is really the power of functional reactive programming: the ability to combine functions, operate, and transform the stream of events.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ExternalLinksListContainer title={'References'} links={[{\n      'name': 'What is meant by Programming Paradigms',\n      'url': 'https://medium.com/@darrion/what-is-meant-by-programming-paradigms-9b965a62b7c7'\n    }, {\n      'name': 'Functional Programming Patterns With Java 8',\n      'url': 'https://dzone.com/articles/functional-programming-patterns-with-java-8'\n    }, {\n      'name': '5 Things to Know About Reactive Programming',\n      'url': 'https://developer.okta.com/blog/2018/09/21/reactive-programming-with-spring'\n    }, {\n      'name': 'Get Started with Reactive Programming in Spring',\n      'url': 'https://dzone.com/articles/5-things-to-know-about-reactive-programming'\n    }, {\n      'name': 'Functional Reactive Programming in Java',\n      'url': 'https://academy.realm.io/posts/droidcon-gomez-functional-reactive-programming/'\n    }]} mdxType=\"ExternalLinksListContainer\">\n    </ExternalLinksListContainer>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","makeShortcode","name","props","console","warn","ExternalLink","ExternalLinksListContainer","layoutProps","MDXContent","components","mdxType","parentName","href","title","links","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}