{"version":3,"file":"component---src-templates-category-tsx-3b608ecfbe8e0fb9eb4b.js","mappings":"oPAGaA,EAAkBC,EAAAA,QAAAA,IAAAA,WAAH,0EAAGA,CAAH,+BAIfC,EAAcD,EAAAA,QAAAA,IAAAA,WAAH,sEAAGA,CAAH,0RAmBXE,EAAcF,EAAAA,QAAAA,IAAAA,WAAH,sEAAGA,CAAH,0BAIXG,EAAWH,EAAAA,QAAAA,IAAAA,WAAH,mEAAGA,CAAH,mlBAOVI,EAAAA,EAAAA,GAAS,mBAAoB,YAwB3BC,EAAcL,EAAAA,QAAAA,IAAAA,WAAH,sEAAGA,CAAH,+BAIXM,EAAYN,EAAAA,QAAAA,GAAAA,WAAH,oEAAGA,CAAH,8WAGXI,EAAAA,EAAAA,GAAS,mBAAoB,YAI3BA,EAAAA,EAAAA,GAAS,mBAAoB,YAe7BG,EAAeP,EAAAA,QAAAA,IAAAA,WAAH,uEAAGA,CAAH,geA0BZQ,EAAUR,EAAAA,QAAAA,EAAAA,WAAH,kEAAGA,CAAH,mKACLI,EAAAA,EAAAA,GAAS,cAAe,OAC5BA,EAAAA,EAAAA,GAAS,YAAa,YASpBK,EAAWT,EAAAA,QAAAA,IAAAA,WAAH,mEAAGA,CAAH,gTAWRI,EAAAA,EAAAA,GAAS,UAAW,Y,yGC1G3BM,EAAmD,SAAC,GAYpD,IAXJC,EAWI,EAXJA,MACAC,EAUI,EAVJA,MACAC,EASI,EATJA,YACAC,EAQI,EARJA,IACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,SACAC,EAKI,EALJA,KACAC,EAII,EAJJA,UAEAC,GAEI,EAHJC,UAGI,EAFJD,eACGE,GACC,YAEEC,EAAgB,CAAC,aAOvB,OAJIJ,GACFI,EAAcC,KAAKL,GAInB,gBAACnB,EAAD,eAAiBmB,UAAWI,EAAcE,KAAK,MAAUH,GAC7C,MAATV,EAAgB,KACf,gBAACV,EAAD,CAAaiB,UAAU,gBACrB,gBAAC,EAAAO,KAAD,CAAMC,GAAIZ,GACN,gBAAC,EAAAa,EAAD,CACEhB,MAAOA,EACPiB,IAAI,eACJC,gBAAiBV,KAItBH,GACC,gBAACT,EAAD,CACEuB,wBAAyB,CACvBC,OAAQf,EAASgB,MAEnBd,UAAU,mBAMlB,gBAAChB,EAAD,CAAagB,UAAU,gBACpBH,GACC,gBAACZ,EAAD,CACE2B,wBAAyB,CACvBC,OAAQhB,GAEVG,UAAU,cAId,gBAACb,EAAD,CAAaa,UAAU,gBACrB,gBAACZ,EAAD,CAAWY,UAAU,cACnB,gBAAC,EAAAO,KAAD,CAAMC,GAAIZ,GAAMF,IAEjBC,GACC,gBAACL,EAAD,CACEsB,wBAAyB,CACvBC,OAAQlB,GAEVK,UAAU,YAIL,MAARD,EAAe,KACd,gBAACR,EAAD,CAAUS,UAAU,aACjBD,EAAKgB,KAAI,SAACC,EAAaC,GAAd,OACR,gBAAC,EAAAV,KAAD,CAAMW,IAAKD,EAAOT,GAAE,SAAW,IAAYQ,GAAvB,KAApB,IACOA,WAWvBxB,EAAS2B,aAAe,CACtBjB,UAAW,SAGb,S,uHC9EA,UA5BiB,SAAC,GAA+B,IAA7BkB,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,KACvBvB,EAAasB,EAAbtB,SACR,EAA8BuB,EAAKC,OAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAgB,IAAMC,EAAAA,EAAY5B,GACxC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKJ,MAAO+B,EAAaX,KAAMnB,YAAW,mBAAqB6B,EAArB,UAE1C,gBAAC,KAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,KAAUC,EAAaX,MADzB,mBAEsBU,EAFtB,SAICD,EAAMR,KAAI,gBAAGY,EAAH,EAAGA,KAAH,EAASV,MAAT,OACT,gBAAC,IAAD,CACEC,IAAKS,EAAKC,OAAOC,KACjBnC,MAAOiC,EAAKG,YAAYpC,MACxBE,IAAK+B,EAAKC,OAAOC,KACjBlC,YAAagC,EAAKG,YAAYnC,aAAegC,EAAKI,QAClDlC,KAAM8B,EAAKG,YAAYjC,KACvBE,KAAM4B,EAAKG,YAAY/B,c,idC1BtBiC,EAAmBlD,EAAAA,QAAAA,IAAAA,WAAH,2EAAGA,CAAH,sjBAgChBmD,EAAqBnD,EAAAA,QAAAA,IAAAA,WAAH,6EAAGA,CAAH,4UAmBlBoD,EAAmBpD,EAAAA,QAAAA,GAAAA,WAAH,2EAAGA,CAAH,8SAClBI,EAAAA,EAAAA,GAAS,mBAAoB,YAGvBA,EAAAA,EAAAA,GAAS,eAAgB,2BAe7BiD,EAAmBrD,EAAAA,QAAAA,IAAAA,WAAH,2EAAGA,CAAH,kEAMhBsD,EAAkBtD,EAAAA,QAAAA,IAAAA,WAAH,0EAAGA,CAAH,itCAkEfuD,EAAkBvD,EAAAA,QAAAA,IAAAA,WAAH,0EAAGA,CAAH,0mBAiCfwD,EAAiBxD,EAAAA,QAAAA,IAAAA,WAAH,yEAAGA,CAAH,gfA4BdyD,EAAUzD,EAAAA,QAAAA,GAAAA,WAAH,kEAAGA,CAAH,2MAGTI,EAAAA,EAAAA,GAAS,iBAAkB,YASzBsD,EAAiB1D,EAAAA,QAAAA,IAAAA,WAAH,yEAAGA,CAAH,wPAcd2D,EAAkB3D,EAAAA,QAAAA,IAAAA,WAAH,0EAAGA,CAAH,kJAUf4D,EAAY5D,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,0bAYTI,EAAAA,EAAAA,GAAS,mBAAoB,YAO3BA,EAAAA,EAAAA,GAAS,iBAAkB,YAO7ByD,EAAyB7D,EAAAA,QAAAA,IAAAA,WAAH,kFAAGA,CAAH,8YAsBtB8D,EAAqB9D,EAAAA,QAAAA,IAAAA,WAAH,8EAAGA,CAAH,eAC3B,SAAAqB,GAAK,OAAIA,EAAM0C,iBAAN,whCAmDAtD,EAAWT,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,mVAaRI,EAAAA,EAAAA,GAAS,UAAW,YAQpB4D,EAAUhE,EAAAA,QAAAA,IAAAA,WAAH,mEAAGA,CAAH,sNAaPiE,EAAWjE,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,oSAiBfkE,GAAeC,EAAAA,EAAAA,WAAH,8JAOLC,EAAepE,EAAAA,QAAAA,GAAAA,WAAH,wEAAGA,CAAH,wCACVkE","sources":["webpack://2much2learn.com/./src/components/PostCard/postCard.style.tsx","webpack://2much2learn.com/./src/components/PostCard/postCard.tsx","webpack://2much2learn.com/./src/templates/category.tsx","webpack://2much2learn.com/./src/templates/templates.style.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const PostCardWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PostPreview = styled.div`\n  margin-bottom: 45px;\n  position: relative;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`;\n\nexport const PostDetails = styled.div`\n  display: flex;\n`;\n\nexport const PostDate = styled.div`\n  font-size: 90px;\n  font-weight: 700;\n  text-align: center;\n  padding: 30px 35px 15px 35px;\n  margin-right: 20px;\n  line-height: 1;\n  color: ${themeGet('colors.textColor', '#292929')};\n  @media (max-width: 1200px) {\n    font-size: 70px;\n    padding: 25px 25px 15px 25px;\n    margin-right: 35px;\n  }\n  @media (max-width: 990px) {\n    font-size: 56px;\n    padding: 20px 20px 15px 20px;\n    margin-right: 25px;\n  }\n  @media (max-width: 575px) {\n    display: none;\n  }\n\n  > span {\n    font-size: 13px;\n    font-weight: 400;\n    display: block;\n    margin-top: 12px;\n    text-transform: uppercase;\n  }\n`;\n\nexport const PostContent = styled.div`\n  align-self: center;\n`;\n\nexport const PostTitle = styled.h2`\n  font-size: 30px;\n  font-weight: 700;\n  color: ${themeGet('colors.textColor', '#292929')};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  a {\n    color: ${themeGet('colors.textColor', '#292929')};\n  }\n  @media (max-width: 1200px) {\n    font-size: 26px;\n  }\n  @media (max-width: 990px) {\n    font-size: 21px;\n    margin-bottom: 12px;\n  }\n  @media (max-width: 575px) {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const PostCategory = styled.div`\n  position: absolute;\n  width: 200px;\n  height: 30px;\n  top: 20px;\n  left: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet('fontSizes.3', '15')}px;\n  color: ${themeGet('textColor', '#292929')};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`;\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet('primary', '#D10068')};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`;\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport _ from \"lodash\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport {\n  PostCardWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostTitle,\n  PostCategory,\n  Excerpt,\n  PostContent,\n  PostTags,\n} from \"./postCard.style\"\n\ninterface PostCardProps {\n  image?: any\n  title: string\n  description?: string\n  url: string\n  date?: string\n  category: any\n  tags?: []\n  className?: string\n  imageType?: \"fixed\" | \"fluid\"\n  placeholderBG?: string\n}\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  category,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = [\"post_card\"]\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className)\n  }\n\n  return (\n    <PostCardWrapper className={addAllClasses.join(\" \")} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>            \n              <GatsbyImage\n                image={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            \n          </Link>\n          {category && (\n            <PostCategory\n              dangerouslySetInnerHTML={{\n                __html: category.name,\n              }}\n              className=\"post_category\"\n            />\n          )}\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {date && (\n          <PostDate\n            dangerouslySetInnerHTML={{\n              __html: date,\n            }}\n            className=\"post_date\"\n          />\n        )}\n\n        <PostContent className=\"post_content\">\n          <PostTitle className=\"post_title\">\n            <Link to={url}>{title}</Link>\n          </PostTitle>\n          {description && (\n            <Excerpt\n              dangerouslySetInnerHTML={{\n                __html: description,\n              }}\n              className=\"excerpt\"\n            />\n          )}\n\n          {tags == null ? null : (\n            <PostTags className=\"post_tags\">\n              {tags.map((tag: string, index: number) => (\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                  {`#${tag}`}\n                </Link>\n              ))}\n            </PostTags>\n          )}\n        </PostContent>\n      </PostDetails>\n    </PostCardWrapper>\n  )\n}\n\nPostCard.defaultProps = {\n  imageType: \"fluid\",\n}\n\nexport default PostCard\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"~/components/layout\"\nimport PostCard from \"~/components/PostCard/postCard\"\nimport SEO from \"~/components/seo\"\nimport { TagPostsWrapper, TagPageHeading, TagName } from \"./templates.style\"\nimport _ from 'lodash'\nimport Categories from '~/utils/CategoryConstants'\n\nconst Category = ({ pageContext, data }: any) => {\n  const { category } = pageContext\n  const { edges, totalCount } = data.allMdx\n  const categoryInfo =  _.get(Categories, category)\n  return (\n    <Layout>\n      <SEO title={categoryInfo.name} description={`A collection of ${totalCount} post`} />\n\n      <TagPostsWrapper>\n        <TagPageHeading>\n          <TagName>{categoryInfo.name}</TagName>\n          {`A collection of ${totalCount} post`}\n        </TagPageHeading>\n        {edges.map(({ node, index }: any) => (\n          <PostCard\n            key={node.fields.slug}\n            title={node.frontmatter.title}\n            url={node.fields.slug}\n            description={node.frontmatter.description || node.excerpt}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n          />\n        ))}\n      </TagPostsWrapper>\n    </Layout>\n  )\n}\n\nexport default Category\n\nexport const pageQuery = graphql`\n  query($alias: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { \n        frontmatter: { \n          category: {eq: $alias}\n          published: {eq: true}\n        } \n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\n            title\n            category\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import styled, { keyframes} from \"styled-components\"\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const BlogPostsWrapper = styled.div`\n  margin: 0 auto;\n  padding-top: 120px;\n  position: relative;\n\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n\n  .post_card {\n    margin-bottom: 120px;\n    @media (max-width: 990px) {\n      margin-bottom: 90px;\n    }\n    @media (max-width: 575px) {\n      margin-bottom: 60px;\n    }\n  }\n`\n\nexport const RelatedPostWrapper = styled.div`\n  margin: 0 auto;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n`\n\nexport const RelatedPostTitle = styled.h2`\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\n  font-size: 16px;\n  font-weight: 500;\n  font-family: ${themeGet(\"fontFamily.0\", \"'Fira Sans',sans-serif\")};\n  letter-spacing: 0.17em;\n  position: relative;\n  margin-bottom: 30px;\n\n  &:after {\n    content: \"\";\n    width: 68px;\n    height: 1px;\n    background: #292929;\n    display: block;\n    margin-top: 8px;\n  }\n`\n\nexport const RelatedPostItems = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -15px;\n`\n\nexport const RelatedPostItem = styled.div`\n  flex: 0 0 33.333333333%;\n  max-width: 33.333333333%;\n  padding: 0 15px;\n  @media (max-width: 575px) {\n    flex: 0 0 100%;\n    max-width: 100%;\n    &:nth-child(n + 2) {\n      margin-top: 50px;\n    }\n  }\n  .post_card {\n    &:hover {\n      .post_preview {\n        a {\n          transform: scale(1.05);\n        }\n      }\n    }\n\n    .post_preview {\n      margin-bottom: 16px;\n      overflow: hidden;\n      a {\n        display: block;\n        transition: 0.25s ease-in-out;\n      }\n      &:before {\n        filter: blur(10px);\n      }\n    }\n    .post_title {\n      font-size: 21px;\n      a {\n        display: block;\n        white-space: nowrap;\n        width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      @media (max-width: 1400px) {\n        font-size: 19px;\n      }\n      @media (max-width: 1200px) {\n        font-size: 17px;\n      }\n      @media (max-width: 990px) {\n        font-size: 15px;\n      }\n    }\n    .post_content {\n      max-width: 100%;\n    }\n\n    .post_tags {\n      margin-top: 20px;\n      a {\n        @media (max-width: 990px) {\n          font-size: 12px;\n          margin-right: 15px;\n        }\n      }\n    }\n  }\n`\nexport const TagPostsWrapper = styled.div`\n  margin: 0 auto;\n  padding-top: 80px;\n  position: relative;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1200px) {\n    width: 1050px;\n  }\n  @media (min-width: 1400px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 30px 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n\n  .post_card {\n    margin-bottom: 120px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n    @media (max-width: 990px) {\n      margin-bottom: 80px;\n    }\n    @media (max-width: 575px) {\n      margin-bottom: 60px;\n    }\n  }\n`\nexport const TagPageHeading = styled.div`\n  padding-left: 210px;\n  font-size: 15px;\n  font-weight: 400;\n  margin-bottom: 120px;\n  position: relative;\n  @media (max-width: 1200px) {\n    padding-left: 160px;\n  }\n  @media (max-width: 990px) {\n    padding-left: 0;\n    font-size: 13px;\n    margin-bottom: 80px;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 60px;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    width: 90px;\n    height: 1px;\n    background: #292929;\n    margin-top: 15px;\n  }\n`\n\nexport const TagName = styled.h1`\n  font-size: 30px;\n  font-weight: 700;\n  color: ${themeGet(\"colors.primary\", \"#D10068\")};\n  margin-bottom: 8px;\n  @media (max-width: 990px) {\n    font-size: 26px;\n  }\n  @media (max-width: 575px) {\n    font-size: 22px;\n  }\n`\nexport const BlogPostFooter = styled.div`\n  margin: 0 auto;\n  width: 870px;\n  max-width: 100%;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  @media (max-width: 990px) {\n    padding-top: 40px;\n  }\n`\n\nexport const BlogPostComment = styled.div`\n  margin: 0 auto;\n  width: 870px;\n  max-width: 100%;\n  padding-top: 80px;\n  @media (max-width: 990px) {\n    padding-top: 60px;\n  }\n`\n\nexport const PostShare = styled.div`\n  display: flex;\n  align-items: center;\n  > span {\n    flex-shrink: 0;\n  }\n  > div,\n  .SocialMediaShareButton {\n    cursor: pointer;\n    margin-left: 25px;\n    font-size: 22px;\n    outline: 0;\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\n    transition: 0.15s ease-in-out;\n    @media (max-width: 767px) {\n      font-size: 18px;\n      margin-left: 20px;\n    }\n    &:hover {\n      color: ${themeGet(\"colors.primary\", \"#D10068\")};\n    }\n    svg {\n      display: block;\n    }\n  }\n`\nexport const BlogPostDetailsWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 auto;\n  padding: 90px 0 120px 0;\n  @media (min-width: 990px) {\n    width: 900px;\n  }\n  @media (min-width: 1100px) {\n    width: 1050px;\n  }\n  @media (min-width: 1250px) {\n    width: 1170px;\n  }\n  @media (max-width: 990px) {\n    padding: 80px 45px 0 45px;\n  }\n  @media (max-width: 575px) {\n    padding: 60px 25px 0 25px;\n  }\n`\n\nexport const BlogDetailsContent = styled.div`\n  ${props => props.extendedBlogPost ? \n    `flex: 0 0 calc(100%);\n    max-width: calc(100%);\n    padding-right: 60px;\n\n    @media (max-width: 1249px) {\n      padding-right: 50px;\n    }\n    @media (max-width: 1100px) {\n      padding-right: 40px;\n    }\n\n    @media (max-width: 990px) {\n      padding-right: 30px;\n    }\n\n    @media (max-width: 767px) {\n      flex: 0 0 100%;\n      max-width: 100%;\n      padding-right: 0;\n    }` \n    : \n    `flex: 0 0 calc(100% - 360px);\n    max-width: calc(100% - 360px);\n    padding-right: 60px;\n\n    @media (max-width: 1249px) {\n      flex: 0 0 calc(100% - 320px);\n      max-width: calc(100% - 320px);\n      padding-right: 50px;\n    }\n    @media (max-width: 1100px) {\n      flex: 0 0 calc(100% - 280px);\n      max-width: calc(100% - 280px);\n      padding-right: 40px;\n    }\n\n    @media (max-width: 990px) {\n      flex: 0 0 calc(100% - 220px);\n      max-width: calc(100% - 220px);\n      padding-right: 30px;\n    }\n\n    @media (max-width: 767px) {\n      flex: 0 0 100%;\n      max-width: 100%;\n      padding-right: 0;\n    }`\n    }\n`\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  @media (max-width: 575px) {\n    display: none;\n  }\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet(\"primary\", \"#D10068\")};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`\n\nexport const PostRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -20px;\n  margin-bottom: 60px;\n  @media (max-width: 990px) {\n    margin-bottom: 40px;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 30px;\n  }\n`\n\nexport const PostGrid = styled.div`\n  flex: 0 0 50%;\n  max-width: 50%;\n  padding: 0 20px;\n  margin-bottom: 90px;\n  @media (max-width: 990px) {\n    margin-bottom: 70px;\n  }\n  @media (max-width: 767px) {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  @media (max-width: 575px) {\n    margin-bottom: 50px;\n  }\n`\n\nconst blinkingText = keyframes`\n  0%{     color: #000;    }\n  49%{    color: #000; }\n  60%{    color: transparent; }\n  99%{    color:transparent;  }\n  100%{   color: #000;    }\n`\nexport const BlinkingToDo = styled.h1`\n  animation: ${blinkingText} 1.2s infinite;\n`"],"names":["PostCardWrapper","styled","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","PostCategory","Excerpt","PostTags","PostCard","image","title","description","url","date","category","tags","className","placeholderBG","imageType","props","addAllClasses","push","join","Link","to","G","alt","backgroundColor","dangerouslySetInnerHTML","__html","name","map","tag","index","key","defaultProps","pageContext","data","allMdx","edges","totalCount","categoryInfo","Categories","node","fields","slug","frontmatter","excerpt","BlogPostsWrapper","RelatedPostWrapper","RelatedPostTitle","RelatedPostItems","RelatedPostItem","TagPostsWrapper","TagPageHeading","TagName","BlogPostFooter","BlogPostComment","PostShare","BlogPostDetailsWrapper","BlogDetailsContent","extendedBlogPost","PostRow","PostGrid","blinkingText","keyframes","BlinkingToDo"],"sourceRoot":""}