{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/1","result":{"data":{"site":{"siteMetadata":{"title":"2much2learn.com"}},"sitePage":{"path":"/dev-404-page/"},"allMdx":{"edges":[{"node":{"excerpt":"Introduction In real world, any production incident soon turns out to be scary when we have to go through  hell lot  of logs. Some times it will be very difficult to replicate the issue by analyzing data is scattered across different log files. This is when Centralized Logging comes to rescue to…","fields":{"slug":"/centralized-logging-with-kafka-and-elk-stack/"},"frontmatter":{"date":"06 <span> Jun 2020 </span>","title":"Configuring Centralized logging with Kafka and ELK stack","description":"A detailed step by step walk through on configuring Centralized logging with Kafka and ELK stack","category":"setup","tags":["Kafka","ELK","Centralized Logging","Setup","featured"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/b6c8feead05d24ce77c7763bc0e8d959/cafad/kafka-elk-banner-1200x690.png","srcSet":"/static/b6c8feead05d24ce77c7763bc0e8d959/d0f60/kafka-elk-banner-1200x690.png 293w,\n/static/b6c8feead05d24ce77c7763bc0e8d959/81480/kafka-elk-banner-1200x690.png 585w,\n/static/b6c8feead05d24ce77c7763bc0e8d959/cafad/kafka-elk-banner-1200x690.png 1170w,\n/static/b6c8feead05d24ce77c7763bc0e8d959/6050d/kafka-elk-banner-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}},{"node":{"excerpt":"Introduction This article is extension of  Creating RESTful API + Event-driven Microservice with Quarkus . We shall go through steps on introducing new REST-endpoint for uploading Catalogue Item Image to  MinIO  which is a Cloud Native  Object Storage  service. Article includes detailed steps on…","fields":{"slug":"/uploading-files-to-cloud-native-object-store-from-quarkus-restful-api/"},"frontmatter":{"date":"10 <span> May 2020 </span>","title":"Uploading files to MinIO Cloud Native Object Store from Quarkus RESTful API","description":"A detailed Step by Step guide on Uploading files to MinIO Cloud Native Object Store from Quarkus RESTful API","category":"microservice","tags":["Java","Quarkus","MinIO","Object Store","Microservice","featured"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/3ff94784e3a4821200335f943526eae5/cafad/crud-quarkus-upload-minio-1200x690.png","srcSet":"/static/3ff94784e3a4821200335f943526eae5/d0f60/crud-quarkus-upload-minio-1200x690.png 293w,\n/static/3ff94784e3a4821200335f943526eae5/81480/crud-quarkus-upload-minio-1200x690.png 585w,\n/static/3ff94784e3a4821200335f943526eae5/cafad/crud-quarkus-upload-minio-1200x690.png 1170w,\n/static/3ff94784e3a4821200335f943526eae5/6050d/crud-quarkus-upload-minio-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}},{"node":{"excerpt":"Introduction This article focuses on implementing React based frontend application to perform CRUD operations on backend API which exposes these operations as RESTful APIs. There are lot of online learning materials and blog posts providing greater insights on getting started with implementing React…","fields":{"slug":"/dockerizing-react-crud-restful-api-integrated-application/"},"frontmatter":{"date":"03 <span> May 2020 </span>","title":"A Step by Step guide on Implementing & Dockerizing React CRUD RESTful API Integrated Application","description":"A detailed Step by Step guide on Implementing & Dockerizing React CRUD RESTful API Integrated Application","category":"frontend","tags":["React","Axios","CRUD","Docker","featured"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/4278f450c9195ba2da53733946119f93/cafad/frontend-banner-1200x690.png","srcSet":"/static/4278f450c9195ba2da53733946119f93/d0f60/frontend-banner-1200x690.png 293w,\n/static/4278f450c9195ba2da53733946119f93/81480/frontend-banner-1200x690.png 585w,\n/static/4278f450c9195ba2da53733946119f93/cafad/frontend-banner-1200x690.png 1170w,\n/static/4278f450c9195ba2da53733946119f93/6050d/frontend-banner-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}},{"node":{"excerpt":"Introduction This article focuses on implementing a microservice application which includes RESTful APIs and event-driven interactions. Application is built using  Quarkus , which is a container-first framework optimized for fast boot times and low memory consumption. Along with other supporting…","fields":{"slug":"/restful-event-driven-microservice-using-quarkus-jpa-kafka/"},"frontmatter":{"date":"23 <span> Apr 2020 </span>","title":"A Step by Step guide to create RESTful + Event-driven Microservice using Quarkus + JPA with Postgres database","description":"A detailed Step by Step guide to create RESTful + Event-driven Microservice using Quarkus + JPA with Postgres database","category":"microservice","tags":["Java","Quarkus","CRUD","JPA","Microservice","featured"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/96bc6c266868cc3493a932ab54a6bbfe/cafad/quarkus-crud-banner-1200x690.png","srcSet":"/static/96bc6c266868cc3493a932ab54a6bbfe/d0f60/quarkus-crud-banner-1200x690.png 293w,\n/static/96bc6c266868cc3493a932ab54a6bbfe/81480/quarkus-crud-banner-1200x690.png 585w,\n/static/96bc6c266868cc3493a932ab54a6bbfe/cafad/quarkus-crud-banner-1200x690.png 1170w,\n/static/96bc6c266868cc3493a932ab54a6bbfe/6050d/quarkus-crud-banner-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}},{"node":{"excerpt":"Introduction We developers always choose Windows when purchasing our laptops but have desire to get our hands dirty on Linux environments.  Windows 10  provides  Windows Subsystem for Linux  (WSL), which is a feature that creates a lightweight environment that allows you to install and run supported…","fields":{"slug":"/configure-java-dev-env-on-dual-boot-ubuntu-with-windows-10/"},"frontmatter":{"date":"05 <span> Apr 2020 </span>","title":"Configure Java development environment on Ubuntu 19.10","description":"A detailed step by step guide on configuring Java development environment on Ubuntu 19.10","category":"setup","tags":["Java","Setup","Ubuntu","featured"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/08812a7cb2b99d38f672cf8bf7a18965/cafad/setup-banner-1200x690.png","srcSet":"/static/08812a7cb2b99d38f672cf8bf7a18965/d0f60/setup-banner-1200x690.png 293w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/81480/setup-banner-1200x690.png 585w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/cafad/setup-banner-1200x690.png 1170w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/6050d/setup-banner-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}},{"node":{"excerpt":"Introduction As part of any application development, we definitely need a database. There might be different use cases which need different databases. Having them all installed on our machine might not be an ideal scenario. In the world of containers, this would ease us to provision the choice of…","fields":{"slug":"/setting-up-postgressql-with-docker-on-windows-10/"},"frontmatter":{"date":"09 <span> Mar 2020 </span>","title":"Setting up PostgreSQL with Docker","description":"A detailed step by step guide on Setting up PostgreSQL with Docker.","category":"setup","tags":["PostgreSQL","Docker","Containerization"],"cover":{"childImageSharp":{"fluid":{"aspectRatio":1.7391304347826086,"src":"/static/08812a7cb2b99d38f672cf8bf7a18965/cafad/setup-banner-1200x690.png","srcSet":"/static/08812a7cb2b99d38f672cf8bf7a18965/d0f60/setup-banner-1200x690.png 293w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/81480/setup-banner-1200x690.png 585w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/cafad/setup-banner-1200x690.png 1170w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/6050d/setup-banner-1200x690.png 1200w","sizes":"(max-width: 1170px) 100vw, 1170px"}}}}}}]}},"pageContext":{"limit":6,"skip":0,"numPages":3,"currentPage":1}}}