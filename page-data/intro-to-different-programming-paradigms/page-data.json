{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/intro-to-different-programming-paradigms/","result":{"data":{"site":{"id":"Site","siteMetadata":{"siteUrl":"https://2much2learn.com"}},"mdx":{"id":"c8179026-bd8b-5cc6-b773-7a58f9965443","excerpt":"What exactly is Programming Paradigm? A programming paradigm is a style or way of programming which defines how we think and approach the problems. There can beâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"templateKey\": \"article\",\n  \"published\": true,\n  \"displayComments\": true,\n  \"showAuthorInfo\": false,\n  \"showSideBar\": true,\n  \"author\": \"narramadan\",\n  \"title\": \"A brief introduction to different Programming Paradigms\",\n  \"description\": \"A brief introduction to different Programming Paradigms that are to be known to every developer which will help them to choose the right one for their use case implementation.\",\n  \"date\": \"2020-02-07T18:46:37.121Z\",\n  \"updated\": \"2020-02-07T18:46:37.121Z\",\n  \"cover\": \"../../../images/blog-banners/programming-paradigm-banner-1200x690.png\",\n  \"category\": \"programming\",\n  \"tags\": [\"Programming\", \"Java\", \"featured\"],\n  \"keywords\": [\"Programming\", \"Paradigm\", \"Programming Paradigm\", \"Functional Programming\", \"Object Oriented Programming\", \"Imperative Programming\", \"Declarative Programming\", \"Functional Reactive Programming\", \"Different programming paradigm in Java\", \"Developers need to know\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ExternalLink = makeShortcode(\"ExternalLink\");\nvar ExternalLinksListContainer = makeShortcode(\"ExternalLinksListContainer\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What exactly is Programming Paradigm?\"), mdx(\"p\", null, \"A programming paradigm is a style or way of programming which defines how we think and approach the problems. There can be more than one type programming paradigms. Here is a brief list of the common ones:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Imperative Programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Functional Programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object-oriented Programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aspect-oriented Programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reactive Programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Functional Reactive Programming\")), mdx(\"p\", null, \"There are lots of programming languages that use one or some of these strategies when they are implemented. And that strategy is a paradigm.\"), mdx(\"p\", null, \"Let\\u2019s briefly go through each one of these.\"), mdx(\"h3\", null, \"Imperative Programming\"), mdx(\"p\", null, \"Imperative programming is the style of programming in which there is a sequence of statements that change the state of the program. Control flow in imperative programming is explicit i.e, commands show how the computation takes place, step by step. Each step affects the global state of the computation.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" grandtotal \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" b \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"5\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\ngrandtotal \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" b\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Sysout\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"grandtotal\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")))), mdx(\"p\", null, \"Imperative programming says how to do something. As shown above, we can see the state of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"grandtotal\"), \" changed from \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0\"), \" to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"6\"), \" by some series of sequential commands. This makes the programs simpler for a someone to read and write. Imperative programming can be written almost in every programming language.\"), mdx(\"h3\", null, \"Functional Programming\"), mdx(\"p\", null, \"Functional Programming is about avoiding reassigning variables, avoiding mutable data structures, avoiding state and favouring functions all-the-way. It is mainly used to perform mathematical functions or logical operations that doesn\\u2019t change the state of variables defined in the program.\"), mdx(\"p\", null, \"Functions implemented should be idempotent by nature i.e, make that same call repeatedly while producing the same result.\"), mdx(\"p\", null, \"Functions are classified as \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Pure\"), \", \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Impure\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Higher Order\"), \" Functions.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pure Functions\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ObjectWithPureFunction\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"sum\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" a\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" b\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" b\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"p\", null, \"This is an example of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Pure Functions\"), \". As shown above, sum() method/function only depends on the input parameters and will not have any side effects modifying the state of variables that are defined outside of the function.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impure Functions\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ObjectWithImpureFunction\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" value \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"add\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" nextValue\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"this\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"value \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+=\"), \" nextValue\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"this\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"p\", null, \"Notice how \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"add()\"), \" method uses a instance/member variable to calculate its return value, and it also modifies the state of the member variable, so it has a side effect. This state changing makes this function to be termed as \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Impure\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Higher Order Functions\")), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Higher order functions\"), \" are functions that either accept other functions as arguments or returns a function as a result. With the introduction of Lambda expressions in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Java 8\"), \", Java supports higher order functions.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"List\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token generics\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"String\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" names \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Arrays\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"asList\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"Madan\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"Meenakshi\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"Manya\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Collections\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"sort\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"names\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"first\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" second\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"->\"), \" first\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"length\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"-\"), \" second\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"length\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")))), mdx(\"p\", null, \"As shown above, sort function is an example of a Higher order function that accepts a lambda expression. The expression \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"(first, second) -> first.length() - second.length()\"), \" is a lambda expression of type \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Comparator<String>\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"(first, second)\"), \" are parameters of the compare method of Comparator.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"first.length() - second.length()\"), \" is the function body that compares the length of two names.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"->\"), \" is the lambda operator that separates parameters from the body of the lambda.\")), mdx(\"h3\", null, \"Object-oriented Programming\"), mdx(\"p\", null, \"Object Oriented Programming a.k.a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OOP\"), \" is the most popular programming paradigm. It has unique advantages like the modularity of the code and the ability to directly associate real-world business problems in terms of code. It proposes the creation of templates (or classes) which can define the state and behavior of the instances they model. The instances interact with each other by sending them messages via methods.\"), mdx(\"p\", null, \"This programming paradigm defines four principles:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Abstraction\"), \" \\u2014 Process of hiding the implementation details from the user. \\u041Enly the functionality will be provided to the user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Encapsulation\"), \" \\u2014 Mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Inheritance\"), \" \\u2014 Process where one class acquires the properties (methods and fields) of another. With the use of inheritance the information is made manageable in a hierarchical order.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Polymorphism\"), \" \\u2014 Ability of an object to take on many forms when a parent class reference is used to refer to a child class object.\")), mdx(\"h3\", null, \"Aspect-oriented Programming\"), mdx(\"p\", null, \"Aspect Oriented Programming a.k.a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"AOP\"), \" is a programming paradigm that aims to increase \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"modularity\"), \" by allowing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"separation of cross-cutting concerns\"), \".\"), mdx(\"p\", null, \"It does so by adding additional behaviour to existing code (an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"advice\"), \") without modifying the code itself, instead separately specifying which code is modified via a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pointcut\"), \" specification, such as \\u201Clog all function calls when the function\\u2019s name begins with \\u2018set\\u2019\\u201C. This allows behaviours that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality.\"), mdx(\"p\", null, \"One can think of AOP as a debugging tool or as a user-level tool. Advice should be reserved for the cases where you cannot get the function changed (user level) or do not want to change the function in production code (debugging).\"), mdx(\"p\", null, \"Standard terminology used in Aspect-oriented programming may include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Cross-cutting concerns\"), \" - These are aspects of a program that affect other concerns.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Advice\"), \" - These are actions taken for a particular join point.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Pointcut\"), \" - These are set of one or more JoinPoint where an advice should be executed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Aspect\"), \" - The combination of the pointcut and the advice is termed an aspect.\")), mdx(\"h3\", null, \"Reactive Programming\"), mdx(\"p\", null, \"Reactive programming is all about handling \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asynchronous streams of data\"), \". It is concerned with data streams and the propagation of change.\"), mdx(\"p\", null, \"In reactive programming, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Observables\"), \" emit data, and send it to the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"subscribers\"), \". This can be seen as data being \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PUSHed\"), \" in reactive programming, as opposed to data being \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PULLed\"), \" in imperative programming, where you explicitly request data (iterating over collection, requesting data from the DB, etc).\"), mdx(\"p\", null, \"Building blocks of Reactive Programming:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Observables\"), \" - Observables are the data source/stream that can emit multiple values, just one, or none. They can also emit errors and can be infinite or finite, in which case they emit their completion event.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Subscribers\"), \" - Subscribers \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"subscribe\"), \" to Observables. They consume/observe the data and also receive the errors and completion events from the Observable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Operators\"), \" - They are used to \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"create\"), \", \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"transform\"), \", \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"filter\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"combine\"), \" Observables.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create - timers, ranges, from other data sources\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transform - map, buffer, group, scan, etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"filter - filter, distinct, skip, debounce, etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"zip, merge, combine latest, etc\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Schedulers\"), \" - It is a mechanism that allows us to easily add threading to our Observables and Subscribers.\")), mdx(\"p\", null, \"The \", mdx(ExternalLink, {\n    href: \"https://www.reactivemanifesto.org/\",\n    mdxType: \"ExternalLink\"\n  }, \"Reactive Manifesto\"), \" is a document that defines the core principles of reactive programming.\"), mdx(\"p\", null, mdx(ExternalLink, {\n    href: \"https://github.com/ReactiveX/RxJava\",\n    mdxType: \"ExternalLink\"\n  }, \"RxJava\"), \" \\u2013 \", mdx(ExternalLink, {\n    href: \"https://github.com/ReactiveX\",\n    mdxType: \"ExternalLink\"\n  }, \"Reactive Extensions\"), \" for the JVM \\u2013 a library for composing asynchronous and event-based programs using observable sequences for the Java VM.\"), mdx(\"h3\", null, \"Functional Reactive Programming\"), mdx(\"p\", null, \" Reactive programming, with the concept of Functional programming is termed as functional reactive programming a.k.a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"FRP\"), \".\"), mdx(\"p\", null, \" FRP helps us to think about asynchronous programs (high-level abstractions), makes the flow of your application easier, and improves standard error handling (data structure = less code, less bugs). That is the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"reactive\"), \" part. The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"functional\"), \" part is the reactive extensions. Rx allow you to manipulate and combine streams of events. Together, that is really the power of functional reactive programming: the ability to combine functions, operate, and transform the stream of events.\"), mdx(\"h2\", null, \"Resources\"), mdx(ExternalLinksListContainer, {\n    title: 'References',\n    links: [{\n      'name': 'What is meant by Programming Paradigms',\n      'url': 'https://medium.com/@darrion/what-is-meant-by-programming-paradigms-9b965a62b7c7'\n    }, {\n      'name': 'Functional Programming Patterns With Java 8',\n      'url': 'https://dzone.com/articles/functional-programming-patterns-with-java-8'\n    }, {\n      'name': '5 Things to Know About Reactive Programming',\n      'url': 'https://developer.okta.com/blog/2018/09/21/reactive-programming-with-spring'\n    }, {\n      'name': 'Get Started with Reactive Programming in Spring',\n      'url': 'https://dzone.com/articles/5-things-to-know-about-reactive-programming'\n    }, {\n      'name': 'Functional Reactive Programming in Java',\n      'url': 'https://academy.realm.io/posts/droidcon-gomez-functional-reactive-programming/'\n    }],\n    mdxType: \"ExternalLinksListContainer\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/intro-to-different-programming-paradigms/"},"frontmatter":{"date":"2020-02-07T18:46:37.121Z","updated":"2020-02-07T18:46:37.121Z","published":true,"showSideBar":true,"title":"A brief introduction to different Programming Paradigms","description":"A brief introduction to different Programming Paradigms that are to be known to every developer which will help them to choose the right one for their use case implementation.","category":"programming","tags":["Programming","Java","featured"],"keywords":["Programming","Paradigm","Programming Paradigm","Functional Programming","Object Oriented Programming","Imperative Programming","Declarative Programming","Functional Reactive Programming","Different programming paradigm in Java","Developers need to know"],"cover":{"id":"251b1f13-524c-55e9-9a28-cfad737ad278","publicURL":"/static/programming-paradigm-banner-1200x690-47ac77018f9ff3830a959cf45f682931.png","childImageSharp":{"id":"58170019-5441-55a6-882c-75c307d1781f","fluid":{"aspectRatio":1.7341040462427746,"src":"/static/47ac77018f9ff3830a959cf45f682931/90dd8/programming-paradigm-banner-1200x690.png","srcSet":"/static/47ac77018f9ff3830a959cf45f682931/0dc59/programming-paradigm-banner-1200x690.png 300w,\n/static/47ac77018f9ff3830a959cf45f682931/0966a/programming-paradigm-banner-1200x690.png 600w,\n/static/47ac77018f9ff3830a959cf45f682931/90dd8/programming-paradigm-banner-1200x690.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"showAuthorInfo":false,"author":{"id":"narramadan","order":1,"alias":"narramadan","name":"Madan Narra","image":{"id":"9892d3b3-cdf2-5885-9c55-b7509c2fcebe","childImageSharp":{"id":"148b5468-348e-5e99-809f-6c13717630ce","fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='210'%20height='210'%3e%3cpath%20d='M0%2016v16h4c3%200%204%200%203-1V15l5%201c5%200%209%202%209%205l1%201v-2c0-4%202-4%203-1v6l2%203V12l2%206c2%2010%203%208%202-6L30%201%2015%200H0v16M31%203c0%203%203%206%206%206h3l-4%201c-7%202-4%208%204%209%203%201%203%201-2%201-5%201-6%203-3%205l1%203%202%201%205-1c2%200%203-1%201-17L43%200h-6c-6%200-6%200-6%203m30%204l2%2011v6l-1%203v1l2%203%204%202c3%200%206%202%206%204l1%201%201-1%201-2a6572%206572%200%200113-3l8-3c1%201%202%200%202-1l3-1c2%200%202%200%201%201l-2%201h2v1l-1%201h9l8-2%208-2c3-1%202%202-1%203-5%201-13%207-13%208h4l4%201%203%201c1%200%202-1%201-2l1-2c6-1%2016-4%2013-5-1-1%200-1%203-1l6%201%201%202c1-1%204%204%204%205l1%201v5c0%202%200%202-1%201%200-2-1-2-6%200l-7%203c-6%200-16%206-13%208v1h-2c0%202-3-1-5-5-3-7-8-10-14-10h-6l-4-1h-1c0-1%201-2%203-2s3-1%205-3l2-3h-3c-5%200-9%202-11%204-1%202%200%203%201%203v1c-1%200-2%200-1%201l-1%201-3%202-3%201-2%201-1%202-2%206c-1%204-2%205-5%205l-1%201c2%202%201%204-1%205s-2%201%201%201c2-1%203-1%204%201s-2%203-9%203c-5%200-6%200-5%201l1%202h-7l-17-5c-2%200-4-2-5-4%200-2%203-3%206-3%202%201%204-1%201-1-9-4-24-1-30%205l-4%202v13H4l-4%201v11h3c4-1%207%200%205%202l-5%201c-2%200-3%200-3%202s1%202%206%202h6l-6%201-5%201v5c0%205%200%205%202%205l6%202-4%201c-3-1-5%202-5%206s0%204%204%204c5%200%205%201%200%202-4%201-4%201-4%204%200%202%200%203%202%203v1c-2%201-2%201-1%202l1%201c-2%201%202%204%206%205h5v-6l1-6v6c0%205%201%206%202%206%202%201%205-3%204-4l1-2v-1l-1-3v-13c2-2%203-3%201-2l-2-1%202-1v-1c-3%200-3-2%200-2%201-1%201-1-1-1-4%200-1-2%204-2%203%200%204%200%202%201l-2%201%202%201h3l-3%201-1%201c2%200%203%202%200%202l1%201v2c-2%200-2%200%200%201v15l2%205%201%203%202%202H19l-14-3H0v52l4-1c10-1%2010%200%207-20-2-10-1-12%202-11s4%205%204%2015l1%208c2%201%202%203%201%203-3%200-2%201%200%203%202%201%202%201%202-2%200-4%202-5%206-6l7-1c9-2%209-1-3%206-2%201-3%203-3%205l-3%206-2-2c-1-3-2-3-14%200l-9%202v4c0%203%200%203%202%203a954%20954%200%20005%200l-2%203%203-3c2-2%203-2%204-1%202%202%204%201%202%200v-2l2%202v3c3%203%204%201%202-2-2-4-2-4%200-4s4%202%203%204l1%202%201-1c1-2%2012-5%2014-4l2%203c0%202%200%203%201%202h1l1%201v-4l-1-1c-4-2-2-3%204-2l7%201c2%202%200%204-3%204-1%200-2%200-1%201h7l10%201h9l2-6c1-5%202-6%205-8%204-1%204%200%204%208v6h11c9%200%2011%200%2010-1v-5l-1%201-2%202c-3%201-3%200-3-2l2-2v-4c-1-1-2-2-1-3l-2-1c-2%200-2%200-1%201l1%201v4l-2-2h-2c-1%200-2%200-2-2v-4l-1-2-1-2-2-5a81%2081%200%2000-1-10l-1-2v-2c-3%203-5-5-3-13%201-2%201-2-1%200l-4%203h-3l-3%201c-3%201-3%201-2-1l10-7c1%200%202-3%202-7s6-12%209-11l2-1h5a1694%201694%200%200013%204c2%200%201%202-2%205l-4%204%205%204c4%206%206%209%201%205l-2-2%201%203c1%206%208%2018%2010%2017l1%202%205%209%207%2011c3%206%207%209%207%207%200-1%201-2%202-1%202%200%203%201%203%202l2%201c3%200%204%202%201%203-5%201%200%202%2015%202l15-1v-10l1-3a29%2029%200%20012-11l-1-2h-1c-1-1%200-1%201-2v-1c-2-1-2-5-1-6v-10c0-6%200-6-3-7-2%200-3-1-2-2l-3-2c-4-1-5-1-8-7-2-7-2-8%205-11%205-3%2010-3%2011%200%202%202%203%203%205%201v-2l2-1c3-1%203-1%202-3a836%20836%200%2001-6-35l3%201c2%200%204%207%204%2014l2%209%203%206-1-5-1-9c2-2%204-1%205%203l2%204v3l1%203%201-3%202-1c2%200%202%200%201-1-2-3%200-6%202-5%202%200%202%200%201%205v3l1%202%201%201V81v7l-4-5-4-6-6-1-11%201c-4%200-6%200-4%201l4%207%202%205h4l5%201%202%201%208%203-8%201c-10-1-15-3-22-11-5-5-6-6-8-5s-3%201-4-1l-3-1c-2%201-2%201-3-4l-1-3%202%202%203%203c0%203%203%200%203-4%200-3%201-4%203-5l4-5c2-3%202-3-1-4l-4%201h-2l-3-1c-3%201%202-4%206-7%205-3%206-2%208%203%200%204%201%204%204%201%201-1%202-2%203-1%200%202%202%201%205-1l2-2-4-5-5-5v-6l-1-5%201%202%201%201v-8l-1-4h-5l-5%201-2-9-1-9%205-1%205-1c0-2-2-2-26-2h-26l1%203c0%202%200%202-2%202-2-1-3%200-1%201%201%201%200%201-1%201-3-1-6%202-6%205l-2%203c-2%201-3%201-4-1s-2-2-7-2c-7%201-10%202-8%203l1%206c-2%200-4-1-4-3s0-2-2-2l-2%201%201%202h1c1-1%201-1%201%201%200%201-1%202-3%202l-3%201c-2%203-4%202-4-1a78%2078%200%2000-2-19V0H60l1%207m119-6c-2%201%200%202%204%201%202%200%203%200%202%201l-1%202-3%201h1c2%200%202%200%201%203-1%201-1%203%201%206%202%204%202%206%202%2011v7l-3%201h-1l1%204%201%203%203%202%201%201h1v-2c-1-1-1-2%201-3%204-3%204-3%206%203%202%204%205%206%204%202l1-2h1c0-1%201-1%203%201l3%202%201%204v4l-3-1-3-2-3-1c-3%200-3%200-3%203%201%204%202%204%209%203h4l-1-21-1-21v-1l1-6V0h-3l-3%201-1%201-2-1h-21M99%203h-4v4c1%204%202%205%203%203h7c6%200%206%200%206-2l-1-4c0-2-1-2-11-1m53%2016l4%205%202%205c-2%201-1%202%202%202l7%207c4%204%205%205%206%204s0-2-2-5l-3-5h-1l-1-1c1-1%200-2-1-3l-2-1-4-4c-4-5-7-6-7-4M45%2040l-4%201c-5%200-5%200-4%203%202%204%203%205%206%205%205%200%205%201%200%202l-3-1h-2c-2%200-3%201-3%202h1c3-1%2011%202%2010%203l1%202%201-2%202-1%202%201-1%201c-1%201-1%201%201%201%203%200%203%200%202-2-2-3-1-4%201-4%204%202%208%201%208%200h-1l-2-2c-1-2-1-2-2-1h-1c-1-1-6%201-7%202-1%202-3-4-2-5h3l2-1-1-3-3-1h-4m-21%201v2l-2%201c-1-1-2%200-2%201%200%202-1%202-4%202h-6l-1-2c0-3-1-3-3-2-5%200-5%201-5%2010v7l3-2c2%200%203-2%204-3l3-1%201-1%201-1c4%202%206%202%206%201v-2l2%201c1%201%201%201%201-1%201-2%203-3%207-2l1-3c0-4-1-6-3-6v1l-1%201-1-1h-1m184%2016l-14%201c-17%201-19%201-18%209l1%206c0%202%201%202%203%201h7c3%200%204-1%204-3l3-4c3-2%206%200%2010%207%203%205%203%205%204%203%203-3%203-14%201-14-3-1-4-3-1-3l2-3h-2m-104%204l-2%201-6%205-5%203%203%201c3%201%203%201%201%201-3%200-8%202-8%203l-1%202%201%202%201-2c0-1%201-2%203-2l4-1h6c4%205-5%2013-11%209h-2l1%201%201%201%202%203c2%202%208%201%208-2%200-2%203-3%205-2l5%203%205%202c2%206%206%202%206-6%200-3%200-5%201-4l1%202%203%202%203%202v-1l-2-1h2c1-1%201-1-1-1h-2l2-2h4l1%201h1l1%202h3c4-1%204-1%200-1h-2l3-1%207-1h5l-4%201-4%201h5c5%200%205%200%203%201l-3%201h6l-3%201c-3%201-3%201-1%201%204%200%202%202-3%202h-5l4%201%206%201c1%201%201%201%202-1s1-2%201%200c0%204%205%205%205%200%200-3%209-5%2012-2%203%202%204%200%201-3-2-2-4-2-9-2-7%200-11-2-11-5%200%200-1-2-3-2l-1-2c1-1-1-3-5-6-2-2-3-2-4-1l-2%201-3-1c-2%201-2%201%201%205%204%206%207%207%2012%206l3%201-7%201c-4%200-6%200-5-1l-2-1c-3%200-4%200-4-2%200-6-12-10-12-4v3l-1-3c-4-11-7-12-16-10M15%2073c-5%202-2%209%204%209l4%202%202%201%201%201h-2c-9-3-13-3-16%201-3%203-2%204%202%202h12c3%201%203%201%204-1l3-1c2%200%202%200%202-2v-3l3-2c2-2%201-5-1-7H15m62%207l-2%205c0%202-1%203-3%204l-15%209c-14%209-17%2013-13%2016l3%202%207%202c6%203%207%201%201-5-5-5-5-6%205-11%209-4%2011-4%2014-1%203%204%204%205%202%205-1-1-4%200-6%201l-5%202c-5%200-5%202%200%202l7%202v-1l-1-3c0-1%201-1%201%201%202%202%205%203%205%200l1%201h1l1-1c2%201%207-1%2010-4%203-2%202-5-2-13l-5-11c-2-5-3-6-6-2m89%2010l1%202v1c-2%200-1%203%202%206%204%204%206%2010%204%2013-1%203%202%2010%205%2011v2l1%202c2%202%201%203-5%203-5%200-6%200-10%202-5%204-5%205%200%202s12-4%2014-3h3c1-1%201-1%201%201v-2l1-8c2-7-4-26-9-30-3-2-8-4-8-2M21%2094l1%203c1%201%201%201-1%201l-4%203c-2%202-2%202%200%204s3%203%202%204h3l4-2h1c1%201%202%200%202-2%201-4%200-6-3-6l1-2c2-2%203-2%207%200l4%201c1-1-8-5-13-6-3%200-4%200-4%202m98%206l-7%207c-2%201-3%202-2%203s1%201-2%202c-4%200-4%202%200%203%203%201%203%202%201%203v2c1%201%201%201%202-1%200-1%201-2%202-1%204%201%2011-11%2010-18%200-6-1-6-4%200m79%2039c0%204-4%2010-9%2012-4%202-4%203-3%207l2%206c2%201%202%2014%201%2027v9l1%203v-3l2-3v-5l1-1c-2-2-2-15-1-15l2%202c0%201%201%201%202-2l1-2%206%205%206%205%201-9c0-7%200-9-3-11-2-4-2-5%201-5l2-2c0-2%200-2-2-1v-2h-2l2-1%202-3c0-2%200-2-3-1l-3%201v-5l-1-2c0-1%200-2-1-1-2%200-2%200-2-2l-1-2c-1-1-1%200-1%201M52%20149c-2%202-4%2011-3%2011v1c0%201%202%201%2013-2%2010-2%2013-6%206-10H52m157%2040l-4%201c-4%201-5%202-4%203l-1%201-1-2c-1-2-1-2-3%201l-2%203c3%201%207%202%209%201h1l1%201h1c3%202%204-1%204-5l-1-4'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/4ceb2bd36c427b7f464700ff3ebfcac5/d02fc/narramadan.jpg","srcSet":"/static/4ceb2bd36c427b7f464700ff3ebfcac5/a4541/narramadan.jpg 53w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/75cbf/narramadan.jpg 105w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/d02fc/narramadan.jpg 210w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/10127/narramadan.jpg 315w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/9eaf3/narramadan.jpg 420w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/7309c/narramadan.jpg 446w","srcWebp":"/static/4ceb2bd36c427b7f464700ff3ebfcac5/db09e/narramadan.webp","srcSetWebp":"/static/4ceb2bd36c427b7f464700ff3ebfcac5/71c20/narramadan.webp 53w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/308aa/narramadan.webp 105w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/db09e/narramadan.webp 210w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/ecd03/narramadan.webp 315w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/20455/narramadan.webp 420w,\n/static/4ceb2bd36c427b7f464700ff3ebfcac5/64836/narramadan.webp 446w","sizes":"(max-width: 210px) 100vw, 210px"}}},"jobTitle":"Software developer, Consultant & Architect","description":"Madan is a software developer, writer, and ex-failed-startup co-founder.\nHe has over 10+ years of experience building scalable and distributed systems using Java, JavaScript, Node.js. He writes about software design and architecture best practices with Java and is especially passionate about Microservices, API Development, Distributed Applications and Frontend Technologies.\n","social":{"facebook":"https://www.facebook.com/madan.narra","github":"https://github.com/narramadan","instagram":"https://instagram.com/narramadan","linkedin":"https://www.linkedin.com/in/narramadan","twitter":"https://twitter.com/narramadan"}}}},"allMdx":{"edges":[{"node":{"id":"d5f4461c-078e-580e-b3aa-22ef36ca0ded","fields":{"slug":"/containerizing-spring-boot-crud-restful-api-application-with-jib/"},"frontmatter":{"title":"A Step by Step guide on Containerizing Spring Boot CRUD RESTful API Application with Jib","category":"setup","tags":["Jib","Docker","Containerization","Spring Boot","featured"],"cover":{"id":"c10931a9-9ca5-5a78-9ff1-e70d00cd249c","publicURL":"/static/setup-banner-1200x690-08812a7cb2b99d38f672cf8bf7a18965.png","childImageSharp":{"id":"5aa520e6-b76c-5aec-8520-904d584d153a","fluid":{"aspectRatio":1.690909090909091,"src":"/static/08812a7cb2b99d38f672cf8bf7a18965/38c88/setup-banner-1200x690.png","srcSet":"/static/08812a7cb2b99d38f672cf8bf7a18965/c1ca2/setup-banner-1200x690.png 93w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/9ed95/setup-banner-1200x690.png 185w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/38c88/setup-banner-1200x690.png 370w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/35163/setup-banner-1200x690.png 555w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/eab1b/setup-banner-1200x690.png 740w,\n/static/08812a7cb2b99d38f672cf8bf7a18965/cb684/setup-banner-1200x690.png 1200w","sizes":"(max-width: 370px) 100vw, 370px"}}}}}},{"node":{"id":"7bc95575-0583-5171-9c25-35d6aca43a32","fields":{"slug":"/crud-restful-api-testing-using-rest-assured/"},"frontmatter":{"title":"A Step by Step guide on Implementing CRUD RESTful API tests with Junit5 + REST-assured","category":"testing","tags":["API Testing","Junit5","REST-assured","Spring Boot","CRUD","featured"],"cover":{"id":"02838325-6786-5210-83e2-1e8cf194120a","publicURL":"/static/testing-banner-1200x690-aab5cee3a8d4b5daa4fed21d032e7c0e.png","childImageSharp":{"id":"e6b342db-f352-5384-a02b-a459c9372ee6","fluid":{"aspectRatio":1.690909090909091,"src":"/static/aab5cee3a8d4b5daa4fed21d032e7c0e/38c88/testing-banner-1200x690.png","srcSet":"/static/aab5cee3a8d4b5daa4fed21d032e7c0e/c1ca2/testing-banner-1200x690.png 93w,\n/static/aab5cee3a8d4b5daa4fed21d032e7c0e/9ed95/testing-banner-1200x690.png 185w,\n/static/aab5cee3a8d4b5daa4fed21d032e7c0e/38c88/testing-banner-1200x690.png 370w,\n/static/aab5cee3a8d4b5daa4fed21d032e7c0e/35163/testing-banner-1200x690.png 555w,\n/static/aab5cee3a8d4b5daa4fed21d032e7c0e/eab1b/testing-banner-1200x690.png 740w,\n/static/aab5cee3a8d4b5daa4fed21d032e7c0e/cb684/testing-banner-1200x690.png 1200w","sizes":"(max-width: 370px) 100vw, 370px"}}}}}},{"node":{"id":"539cad64-4af1-5b89-96d5-52b538f70327","fields":{"slug":"/crud-rest-api-using-spring-boot-spring-data-jpa/"},"frontmatter":{"title":"A Step by Step guide to create CRUD RESTful APIs using Spring Boot + Spring Data JPA with H2 in-memory database","category":"crudFromScratch","tags":["Java","Spring Boot","CRUD","Spring Data JPA","featured"],"cover":{"id":"ede7f453-665f-57ab-a831-e5a5e8f6ab35","publicURL":"/static/crud-springboot-banner-1200x690-35785f745b1e44ad05193804145b4942.png","childImageSharp":{"id":"749db4a2-7bb3-573f-9d8e-62d805e038bd","fluid":{"aspectRatio":1.690909090909091,"src":"/static/35785f745b1e44ad05193804145b4942/38c88/crud-springboot-banner-1200x690.png","srcSet":"/static/35785f745b1e44ad05193804145b4942/c1ca2/crud-springboot-banner-1200x690.png 93w,\n/static/35785f745b1e44ad05193804145b4942/9ed95/crud-springboot-banner-1200x690.png 185w,\n/static/35785f745b1e44ad05193804145b4942/38c88/crud-springboot-banner-1200x690.png 370w,\n/static/35785f745b1e44ad05193804145b4942/35163/crud-springboot-banner-1200x690.png 555w,\n/static/35785f745b1e44ad05193804145b4942/eab1b/crud-springboot-banner-1200x690.png 740w,\n/static/35785f745b1e44ad05193804145b4942/cb684/crud-springboot-banner-1200x690.png 1200w","sizes":"(max-width: 370px) 100vw, 370px"}}}}}}]},"authors":{"group":[{"fieldValue":"narramadan","totalCount":6}]}},"pageContext":{"slug":"/intro-to-different-programming-paradigms/","previous":{"fields":{"slug":"/setup-java-dev-env-using-vagrant/"},"frontmatter":{"title":"Provision Ubuntu Desktop with Java Development Environment done using Vagrant on Windows 10","author":{"order":1,"alias":"narramadan","name":"Madan Narra","image":{"relativePath":"authors/narramadan.jpg"},"jobTitle":"Software developer, Consultant & Architect","description":"Madan is a software developer, writer, and ex-failed-startup co-founder.\nHe has over 10+ years of experience building scalable and distributed systems using Java, JavaScript, Node.js. He writes about software design and architecture best practices with Java and is especially passionate about Microservices, API Development, Distributed Applications and Frontend Technologies.\n","social":{"facebook":"https://www.facebook.com/madan.narra","github":"https://github.com/narramadan","instagram":"https://instagram.com/narramadan","linkedin":"https://www.linkedin.com/in/narramadan","twitter":"https://twitter.com/narramadan"}},"category":"setup","tags":["Vagrant","Setup"]}},"next":{"fields":{"slug":"/crud-rest-api-using-spring-boot-spring-data-jpa/"},"frontmatter":{"title":"A Step by Step guide to create CRUD RESTful APIs using Spring Boot + Spring Data JPA with H2 in-memory database","author":{"order":1,"alias":"narramadan","name":"Madan Narra","image":{"relativePath":"authors/narramadan.jpg"},"jobTitle":"Software developer, Consultant & Architect","description":"Madan is a software developer, writer, and ex-failed-startup co-founder.\nHe has over 10+ years of experience building scalable and distributed systems using Java, JavaScript, Node.js. He writes about software design and architecture best practices with Java and is especially passionate about Microservices, API Development, Distributed Applications and Frontend Technologies.\n","social":{"facebook":"https://www.facebook.com/madan.narra","github":"https://github.com/narramadan","instagram":"https://instagram.com/narramadan","linkedin":"https://www.linkedin.com/in/narramadan","twitter":"https://twitter.com/narramadan"}},"category":"crudFromScratch","tags":["Java","Spring Boot","CRUD","Spring Data JPA","featured"]}},"tag":["Programming","Java","featured"]}}}