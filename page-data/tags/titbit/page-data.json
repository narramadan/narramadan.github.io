{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/titbit/","result":{"data":{"allMdx":{"totalCount":2,"edges":[{"node":{"excerpt":"Introduction Recently I had to stumble upon a requirement to optimize my code to perform parallel calls to multiple downstream systems returning different response objects and stitch to a specific value object.  There is no common interface implemented by these different response objects and cannot…","fields":{"slug":"/handle-different-return-types-from-future-and-executeservice/"},"frontmatter":{"date":"11 <span> Jul 2020 </span>","title":"How to handle different return types from Future and ExecuteService invokeAll() ?","tags":["titbit","java","executorservice"],"description":"A way to handle different return types from Future and ExecuteService invokeAll()"}}},{"node":{"excerpt":"Introduction An  MD5  checksum is a 32-character hexadecimal number that verifies 128-bit  MD5   hashes  on a file. If two files have the same MD5 checksum value, then there is a high probability that the two files are the same. However, it is very unlikely that any two non-identical files in the…","fields":{"slug":"/validating-integrity-of-files-with-md5-checksum/"},"frontmatter":{"date":"27 <span> Jun 2020 </span>","title":"Validating integrity of files with md5 checksum","tags":["titbit","checksum","md5sum","certutil"],"description":"Commands for different OS to validate integrity of files with md5 checksum"}}}]}},"pageContext":{"tag":"titbit"}},"staticQueryHashes":["1095007180","2729090834"]}