{
    "componentChunkName": "component---src-templates-tags-tsx",
    "path": "/tags/featured/",
    "result": {"data":{"allMdx":{"totalCount":18,"edges":[{"node":{"excerpt":"Introduction There is no specific need to start the introduction with terms like  swagger ,  openapi ,  API Specs . These are defacto terms that we come across and use them on day-to-day basis as part of API Development activities. But, we need to understand three key approaches revolving around…","fields":{"slug":"/rest-api-design-first-development-with-apicurio/"},"frontmatter":{"date":"27 <span> Oct 2021 </span>","title":"RESTful API Design-first development with Apicurio Studio","tags":["OpenAPI","Apicurio","featured"],"description":"A detailed step by step guide on creating RESTful API OpenAPI interface using Apicurio following Design-first approach"}}},{"node":{"excerpt":"Introduction As part of any application development, we definitely need a database. There might be different use cases which need different databases. Having them all installed on our machine might not be an ideal scenario. In the world of containers, this would ease us to provision the choice of…","fields":{"slug":"/setting-up-cassandra-with-docker/"},"frontmatter":{"date":"19 <span> Oct 2021 </span>","title":"Setting up Cassandra with Docker","tags":["Cassandra","Docker","Containerization","featured"],"description":"A detailed step by step guide on Setting up Cassandra with Docker."}}},{"node":{"excerpt":"Introduction In this article, we shall dig into steps on how to enable  Service Registration and Discovery  in  Spring Boot  microservices with  Spring Cloud Consul . Let's understand the below  Problem Statement  before we proceed further. With current infrastructure capabilities, services can be…","fields":{"slug":"/service-registration-and-discovery-in-spring-boot-microservices-with-spring-cloud-consul/"},"frontmatter":{"date":"03 <span> Jan 2021 </span>","title":"Service Registration and Discovery in Spring Boot Microservices with Spring Cloud Consul","tags":["Java","Spring Boot","Spring Cloud","Microservice","featured"],"description":"A detailed step by step guide on enabling Service Registration and Discovery in Spring Boot Microservices with Spring Cloud Consul"}}},{"node":{"excerpt":"Introduction This article is about bootstrapping Maven / Gradle multi-module Spring Boot Microservices and have them deployed using Docker Compose & Kubernetes. Most of the articles around the web try to define a single Spring Boot application and provide steps on dockerizing and have them deployed…","fields":{"slug":"/mavengradle-based-multi-module-spring-boot-microservices/"},"frontmatter":{"date":"27 <span> Dec 2020 </span>","title":"Containerizing Maven/Gradle based Multi Module Spring Boot Microservices using Docker & Kubernetes","tags":["Java","Spring Boot","Microservice","featured"],"description":"A detailed step by step guide to Containerize Maven/Gradle based Multi Module Spring Boot Microservices using Docker & Kubernetes"}}},{"node":{"excerpt":"Introduction The focus of this article is to build a Native Executable Reactive CRUD RESTful API built using GraalVM + Spring Boot. This is an extension to the previously published article -  A Step by Step guide to create Reactive CRUD RESTful APIs using Spring Boot + Spring Data R2DBC with H2 in…","fields":{"slug":"/crud-reactive-rest-api-using-spring-boot-r2dbc-graalvm-native/"},"frontmatter":{"date":"13 <span> Sep 2020 </span>","title":"A Step by Step guide to create Native Executable Reactive CRUD RESTful APIs using GraalVM + Spring Boot + Spring R2DBC with H2 in-memory database","tags":["Java","Spring Boot","Spring WebFlux","Spring R2DBC","GraalVM","CRUD","featured"],"description":"A detailed step by step guide to create Native Executable Reactive CRUD RESTful APIs using GraalVM + Spring Boot + Spring R2DBC with H2 in-memory database"}}},{"node":{"excerpt":"Introduction Spring Boot is Spring's convention-over-configuration solution for creating stand-alone, production-grade Spring-based Applications that you can \"just run\". Some of Spring Boot feature are: Create stand-alone Spring applications Embed Tomcat or Jetty directly (no need to deploy WAR…","fields":{"slug":"/crud-reactive-rest-api-using-springboot-springdata-r2dbc/"},"frontmatter":{"date":"30 <span> Aug 2020 </span>","title":"A Step by Step guide to create Reactive CRUD RESTful APIs using Spring Boot + Spring Data R2DBC with H2 in-memory database","tags":["Java","Spring Boot","Spring WebFlux","Spring Data R2DBC","CRUD","featured"],"description":"A detailed step by step guide to create Reactive CRUD RESTful APIs using Spring Boot + Spring Data R2DBC with H2 in-memory database"}}},{"node":{"excerpt":"What is Reactive Reactive  in the context of software development and design, they generally mean one of below things: Reactive Systems  (architecture and design) Reactive Programming  (declarative event-based) Functional Reactive Programming  (FRP) Reactive Streams  (Standard) Reactive System The…","fields":{"slug":"/understanding-reactive-programming/"},"frontmatter":{"date":"16 <span> Aug 2020 </span>","title":"Understanding Reactive Programming and Reactive Streams","tags":["Programming","Java","Reactive Programming","Reactive Streams","featured"],"description":"A brief notes on getting us familiarized with the concepts of Reactive Programming and Reactive Streams"}}},{"node":{"excerpt":"Introduction In real world, any production incident soon turns out to be scary when we have to go through  hell lot  of logs. Some times it will be very difficult to replicate the issue by analyzing data is scattered across different log files. This is when Centralized Logging comes to rescue to…","fields":{"slug":"/centralized-logging-with-kafka-and-elk-stack/"},"frontmatter":{"date":"06 <span> Jun 2020 </span>","title":"Configuring Centralized logging with Kafka and ELK stack","tags":["Kafka","ELK","Centralized Logging","Setup","featured"],"description":"A detailed step by step walk through on configuring Centralized logging with Kafka and ELK stack"}}},{"node":{"excerpt":"Introduction This article is extension of  Creating RESTful API + Event-driven Microservice with Quarkus . We shall go through steps on introducing new REST-endpoint for uploading Catalogue Item Image to  MinIO  which is a Cloud Native  Object Storage  service. Article includes detailed steps on…","fields":{"slug":"/uploading-files-to-cloud-native-object-store-from-quarkus-restful-api/"},"frontmatter":{"date":"10 <span> May 2020 </span>","title":"Uploading files to MinIO Cloud Native Object Store from Quarkus RESTful API","tags":["Java","Quarkus","MinIO","Object Store","Microservice","featured"],"description":"A detailed Step by Step guide on Uploading files to MinIO Cloud Native Object Store from Quarkus RESTful API"}}},{"node":{"excerpt":"Introduction This article focuses on implementing React based frontend application to perform CRUD operations on backend API which exposes these operations as RESTful APIs. There are lot of online learning materials and blog posts providing greater insights on getting started with implementing React…","fields":{"slug":"/dockerizing-react-crud-restful-api-integrated-application/"},"frontmatter":{"date":"03 <span> May 2020 </span>","title":"A Step by Step guide on Implementing & Dockerizing React CRUD RESTful API Integrated Application","tags":["React","Axios","CRUD","Docker","featured"],"description":"A detailed Step by Step guide on Implementing & Dockerizing React CRUD RESTful API Integrated Application"}}},{"node":{"excerpt":"Introduction This article focuses on implementing a microservice application which includes RESTful APIs and event-driven interactions. Application is built using  Quarkus , which is a container-first framework optimized for fast boot times and low memory consumption. Along with other supporting…","fields":{"slug":"/restful-event-driven-microservice-using-quarkus-jpa-kafka/"},"frontmatter":{"date":"23 <span> Apr 2020 </span>","title":"A Step by Step guide to create RESTful + Event-driven Microservice using Quarkus + JPA with Postgres database","tags":["Java","Quarkus","CRUD","JPA","Microservice","GraalVM","featured"],"description":"A detailed Step by Step guide to create RESTful + Event-driven Microservice using Quarkus + JPA with Postgres database"}}},{"node":{"excerpt":"Introduction We developers always choose Windows when purchasing our laptops but have desire to get our hands dirty on Linux environments.  Windows 10  provides  Windows Subsystem for Linux  (WSL), which is a feature that creates a lightweight environment that allows you to install and run supported…","fields":{"slug":"/configure-java-dev-env-on-dual-boot-ubuntu-with-windows-10/"},"frontmatter":{"date":"05 <span> Apr 2020 </span>","title":"Configure Java development environment on Ubuntu 19.10","tags":["Java","Setup","Ubuntu","featured"],"description":"A detailed step by step guide on configuring Java development environment on Ubuntu 19.10"}}},{"node":{"excerpt":"Introduction Containerization is process of packaging executable code along with the runtime environment which can be deployed on a virtual image.  Docker  is the de facto system for containerizing applications. Docker needs us to create and maintain  dockerfile , which we need to use to create the…","fields":{"slug":"/containerizing-spring-boot-crud-restful-api-application-with-jib/"},"frontmatter":{"date":"24 <span> Feb 2020 </span>","title":"A Step by Step guide on Containerizing Spring Boot CRUD RESTful API Application with Jib","tags":["Jib","Docker","Containerization","Spring Boot","featured"],"description":"A detailed step by step guide on Containerizing Spring Boot CRUD RESTful API Application with Jib and test drive the app by deploy the app with docker."}}},{"node":{"excerpt":"Introduction API testing  is a type of software testing that involves testing  application programming interfaces  (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security. Since APIs lack a GUI, API testing…","fields":{"slug":"/crud-restful-api-testing-using-rest-assured/"},"frontmatter":{"date":"22 <span> Feb 2020 </span>","title":"A Step by Step guide on Implementing CRUD RESTful API tests with Junit5 + REST-assured","tags":["API Testing","Junit5","REST-assured","Spring Boot","CRUD","featured"],"description":"A detailed step by step guide on Implementing CRUD RESTful API tests with Junit5 + REST-assured"}}},{"node":{"excerpt":"Introduction Spring Boot is Spring's convention-over-configuration solution for creating stand-alone, production-grade Spring-based Applications that you can \"just run\". Some of Spring Boot feature are: Create stand-alone Spring applications Embed Tomcat or Jetty directly (no need to deploy WAR…","fields":{"slug":"/crud-rest-api-using-spring-boot-spring-data-jpa/"},"frontmatter":{"date":"18 <span> Feb 2020 </span>","title":"A Step by Step guide to create CRUD RESTful APIs using Spring Boot + Spring Data JPA with H2 in-memory database","tags":["Java","Spring Boot","CRUD","Spring Data JPA","featured"],"description":"A detailed step by step guide to create CRUD RESTful APIs using Spring Boot + Spring Data JPA with H2 in-memory database"}}},{"node":{"excerpt":"What exactly is Programming Paradigm? A programming paradigm is a style or way of programming which defines how we think and approach the problems. There can be more than one type programming paradigms. Here is a brief list of the common ones: Imperative Programming Functional Programming Object…","fields":{"slug":"/intro-to-different-programming-paradigms/"},"frontmatter":{"date":"07 <span> Feb 2020 </span>","title":"A brief introduction to different Programming Paradigms","tags":["Programming","Java","featured"],"description":"A brief introduction to different Programming Paradigms that are to be known to every developer which will help them to choose the right one for their use case implementation."}}},{"node":{"excerpt":"Introduction JDK provides a powerful, high quality and high performance reusable data structures and algorithms in a so-called Java Collections Framework. This is a quick reference post to get to know about or using Java Collections interfaces and their implementations. Looking for what collection…","fields":{"slug":"/java-collections-quick-reference/"},"frontmatter":{"date":"02 <span> Feb 2020 </span>","title":"Java Collections Quick Reference","tags":["Java Collections","Quick Reference","featured"],"description":"Quick reference post to get to know about or using Java Collections interfaces and their implementations."}}},{"node":{"excerpt":"Markdown syntax Markdown is a lightweight markup language with plain text formatting syntax. Below is the syntax cheatsheet for quick reference to get things done with Markdown. Headers Emphasis Common text Emphasized text Strikethrough text Strong text Strong emphasized text Backslash Escapes…","fields":{"slug":"/markdown/"},"frontmatter":{"date":"22 <span> Jan 2020 </span>","title":"Markdown Cheatsheet","tags":["markdown","cheatsheets","featured"],"description":"Markdown is a lightweight markup language with plain text formatting syntax. Below is the syntax cheatsheet for quick reference to get things done with Markdown."}}}]}},"pageContext":{"tag":"featured"}},
    "staticQueryHashes": ["1078049558","1095007180"]}