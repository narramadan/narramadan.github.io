{"version":3,"sources":["webpack:///./src/containers/Todos/style.tsx","webpack:///./src/components/PostCardMinimal/postCardMinimal.style.tsx","webpack:///./src/components/PostCardMinimal/postCardMinimal.tsx","webpack:///./src/containers/Todos/Todos/style.tsx","webpack:///./src/containers/Todos/Todos/index.tsx","webpack:///./src/containers/Todos/index.tsx","webpack:///./src/pages/todo.tsx"],"names":["TodosPageWrapper","styled","div","PostCardWrapper","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","h2","Excerpt","p","PostTags","PostDateAndPreview","ReadMore","PostCardMinimal","image","title","description","url","date","tags","category","className","imageType","props","addAllClasses","push","join","dangerouslySetInnerHTML","__html","to","fluid","alt","fixed","name","map","tag","index","key","defaultProps","BlogPostsWrapper","SecTitle","Posts","useStaticQuery","allMdx","edges","node","frontmatter","fields","slug","categoryInfo","Categories","cover","childImageSharp","excerpt","TodosPage","Todos","AuthorsIndexPage","data","site","siteMetadata"],"mappings":"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","file":"component---src-pages-todo-tsx-8788b9d6cb42cfb47657.js","sourcesContent":["import styled from \"styled-components\"\r\n\r\nconst TodosPageWrapper = styled.div``\r\n\r\nexport default TodosPageWrapper\r\n","import styled from \"styled-components\"\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardWrapper = styled.div`\r\n  position: relative;\r\n  &:hover {\r\n    .post_preview {\r\n      transform: translateY(0);\r\n    }\r\n    .post_date {\r\n      transform: translateY(100%);\r\n    }\r\n  }\r\n`\r\n\r\nexport const PostPreview = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transform: translateY(-100%);\r\n  transition: 0.35s ease-in-out;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    transform: translateY(0);\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-bottom: 30px;\r\n    width: auto;\r\n    height: auto;\r\n    position: relative;\r\n    transform: translateY(0);\r\n  }\r\n`\r\n\r\nexport const PostDetails = styled.div`\r\n  display: flex;\r\n  @media (max-width: 575px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const PostDate = styled.div`\r\n  font-size: 90px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  line-height: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  transition: 0.35s ease-in-out;\r\n  @media (max-width: 1200px) {\r\n    font-size: 70px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 56px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    display: none;\r\n  }\r\n\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: block;\r\n    margin-top: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`\r\n\r\nexport const PostContent = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 21px;\r\n  font-weight: 700;\r\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  font-family: \"Fira Sans\", sans-serif;\r\n  a {\r\n    color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 21px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 19px;\r\n    margin-bottom: 12px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 17px;\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet(\"fontSizes.3\", \"15\")}px;\r\n  color: ${themeGet(\"textColor\", \"#292929\")};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet(\"primary\", \"#D10068\")};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const PostDateAndPreview = styled.div`\r\n  position: relative;\r\n  margin-right: 45px;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n  height: 170px;\r\n  width: 170px;\r\n  @media (max-width: 1200px) {\r\n    margin-right: 35px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    margin-right: 25px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    height: auto;\r\n    width: auto;\r\n  }\r\n`\r\n\r\nexport const ReadMore = styled.div`\r\n  margin-top: 16px;\r\n  a {\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    color: ${themeGet(\"textColor\", \"#292929\")};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet(\"primary\", \"#D10068\")};\r\n    }\r\n  }\r\n`\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport _ from \"lodash\"\r\nimport Img from \"gatsby-image\"\r\nimport {\r\n  PostCardWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostContent,\r\n  PostTags,\r\n  PostDateAndPreview,\r\n  ReadMore,\r\n} from \"./postCardMinimal.style\"\r\n\r\ninterface PostCardMinimalProps {\r\n  image?: any\r\n  title: string\r\n  description?: string\r\n  url: string\r\n  date?: string\r\n  tags?: []\r\n  category?: any\r\n  className?: string\r\n  imageType?: \"fixed\" | \"fluid\"\r\n}\r\n\r\nconst PostCardMinimal: React.FunctionComponent<PostCardMinimalProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  tags,\r\n  category,\r\n  className,\r\n  imageType,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = [\"post_card\"]\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className)\r\n  }\r\n\r\n  return (\r\n    <PostCardWrapper className={addAllClasses.join(\" \")} {...props}>\r\n      <PostDetails className=\"post_details\">\r\n        <PostDateAndPreview>\r\n          {date && (\r\n            <PostDate\r\n              dangerouslySetInnerHTML={{\r\n                __html: date,\r\n              }}\r\n              className=\"post_date\"\r\n            />\r\n          )}\r\n          {image == null ? null : (\r\n            <PostPreview className=\"post_preview\">\r\n              <Link to={url}>\r\n                {imageType === \"fluid\" ? (\r\n                  <Img fluid={image} alt=\"post preview\" />\r\n                ) : (\r\n                  <Img fixed={image} alt=\"post preview\" />\r\n                )}\r\n              </Link>\r\n            </PostPreview>\r\n          )}\r\n        </PostDateAndPreview>\r\n\r\n        <PostContent className=\"post_content\">\r\n          {category && (\r\n            <h3>{`${category.name}`}</h3>\r\n          )}\r\n          {tags == null ? null : (\r\n            <PostTags className=\"post_tags\">\r\n              {tags.map((tag: string, index: number) => (\r\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                  {`#${tag}`}\r\n                </Link>\r\n              ))}\r\n            </PostTags>\r\n          )}\r\n          <PostTitle className=\"post_title\">\r\n            <Link to={url}>{title}</Link>\r\n          </PostTitle>\r\n          {description && (\r\n            <Excerpt\r\n              dangerouslySetInnerHTML={{\r\n                __html: description,\r\n              }}\r\n              className=\"excerpt\"\r\n            />\r\n          )}\r\n          <ReadMore>\r\n            <Link to={url}>Read More</Link>\r\n          </ReadMore>\r\n        </PostContent>\r\n      </PostDetails>\r\n    </PostCardWrapper>\r\n  )\r\n}\r\n\r\nPostCardMinimal.defaultProps = {\r\n  imageType: \"fluid\",\r\n}\r\n\r\nexport default PostCardMinimal\r\n","import styled from \"styled-components\"\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nconst BlogPostsWrapper = styled.div`\r\n  margin: 0 auto;\r\n  position: relative;\r\n  .post_card {\r\n    margin-bottom: 120px;\r\n    @media (max-width: 990px) {\r\n      margin-bottom: 90px;\r\n    }\r\n    @media (max-width: 575px) {\r\n      margin-bottom: 60px;\r\n    }\r\n  }\r\n  @media (min-width: 990px) {\r\n    width: 900px;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    width: 1050px;\r\n  }\r\n  @media (min-width: 1400px) {\r\n    width: 1170px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    padding: 0 45px 0 45px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    padding: 0 25px 0 25px;\r\n  }\r\n`\r\n\r\nexport const SecTitle = styled.div`\r\n  color: ${themeGet(\"colors.textColor\", \"#292929\")};\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  font-family: ${themeGet(\"fontFamily.0\", \"'Fira Sans',sans-serif\")};\r\n  letter-spacing: 0.17em;\r\n  position: relative;\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n\r\n  &:after {\r\n    content: \"\";\r\n    width: 68px;\r\n    height: 1px;\r\n    background: #292929;\r\n    display: block;\r\n    margin-top: 8px;\r\n  }\r\n`\r\n\r\nexport default BlogPostsWrapper\r\n","import * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport PostCardMinimal from \"~/components/PostCardMinimal/postCardMinimal\"\r\nimport _ from 'lodash'\r\nimport Categories from '~/utils/CategoryConstants'\r\n\r\nimport BlogPostsWrapper, { SecTitle } from \"./style\"\r\n\r\ntype PostsProps = {}\r\n\r\nconst Posts: React.FunctionComponent<PostsProps> = props => {\r\n  const Data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n      allMdx(\r\n        filter: {\r\n          frontmatter: {\r\n            templateKey: {eq: \"article\"},\r\n            published: {eq: false}\r\n          }\r\n        }\r\n        sort: { fields: [frontmatter___date], order: DESC }\r\n      ) {\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(pruneLength: 300)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"DD [<span>] MMM YYYY [</span>]\")\r\n              title\r\n              description\r\n              tags\r\n              category\r\n              cover {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 325, maxHeight: 325, quality: 100) {\r\n                    ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const Posts = Data.allMdx.edges\r\n  return (\r\n    <BlogPostsWrapper>\r\n      <SecTitle>TODOs</SecTitle>\r\n      {Posts.map(({ node }: any) => {\r\n        const title = node.frontmatter.title || node.fields.slug\r\n        const categoryInfo =  _.get(Categories, node.frontmatter.category)\r\n        return (\r\n          <PostCardMinimal\r\n            key={node.fields.slug}\r\n            title={title}\r\n            image={\r\n              node.frontmatter.cover == null\r\n                ? null\r\n                : node.frontmatter.cover.childImageSharp.fluid\r\n            }\r\n            url={node.fields.slug}\r\n            description={node.frontmatter.description || node.excerpt}\r\n            date={node.frontmatter.date}\r\n            tags={node.frontmatter.tags}\r\n            category={categoryInfo}\r\n          />\r\n        )\r\n      })}\r\n      \r\n    </BlogPostsWrapper>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n","import * as React from \"react\"\r\nimport TodosPageWrapper from \"./style\"\r\nimport Todos from \"./Todos\"\r\n\r\ntype TodosPageProps = {}\r\n\r\nconst TodosPage: React.FunctionComponent<TodosPageProps> = ({\r\n  ...props\r\n}) => {\r\n  return (\r\n    <TodosPageWrapper {...props}>\r\n      <Todos />\r\n    </TodosPageWrapper>\r\n  )\r\n}\r\n\r\nexport default TodosPage\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"~/components/layout\"\r\nimport TodoPage from \"~/containers/Todos\"\r\nimport SEO from \"~/components/seo\"\r\n\r\nconst AuthorsIndexPage = (props: any) => {\r\n  const { data } = props\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title=\"Todo Page\"\r\n        description={data.site.siteMetadata.description}\r\n      />\r\n      <TodoPage />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default AuthorsIndexPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}