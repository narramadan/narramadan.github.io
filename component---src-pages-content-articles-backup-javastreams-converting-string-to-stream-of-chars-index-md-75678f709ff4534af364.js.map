{"version":3,"sources":["webpack:///./src/pages/content/articles_backup/javastreams/converting-string-to-stream-of-chars/index.md"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-content-articles-backup-javastreams-converting-string-to-stream-of-chars-index-md-75678f709ff4534af364.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"templateKey\": \"article\",\n  \"published\": false,\n  \"displayComments\": true,\n  \"showAuthorInfo\": false,\n  \"author\": \"narramadan\",\n  \"title\": \"Converting String to Stream of chars\",\n  \"description\": \"Converting String to Stream of chars\",\n  \"date\": \"2020-01-05T23:46:37.121Z\",\n  \"updated\": \"2020-01-05T23:46:37.121Z\",\n  \"cover\": \"../../../images/blog-banners/microservice-banner-1200x690.png\",\n  \"category\": \"javastreams\",\n  \"tags\": [\"java\", \"streams\", \"featured\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Intro`}</h2>\n    <p>{`Java 8 introduced the Stream API, with functional-like operations for processing sequences. If you want to read more about it, have a look at this article.`}</p>\n    <p>{`In this quick article, we’ll see how to convert a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` to a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` of single characters.`}</p>\n    <h2>{`Conversion Using chars()`}</h2>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` API has a new method – `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` – with which we can obtain an instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` from a String object. This simple API returns an instance of IntStream from the input String.`}</p>\n    <p>{`Simply put, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` contains an integer representation of the characters from the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{` object:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`String`}</span>{` testString `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"String\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`IntStream`}</span>{` intStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`chars`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`It’s possible to work with the integer representation of the characters without converting them to their `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` equivalent. This can lead to some minor performance gains, as there will be no need to box each integer into a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` object.`}</p>\n    <p>{`However, if we’re to display the characters for reading, we need to convert the integers to the human-friendly `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Character`}</code>{` form:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`Character`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` characterStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`chars`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2>{`Conversion Using codePoints()`}</h2>\n    <p>{`Alternatively, we can use the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` method to get an instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` from a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`String`}</code>{`. The advantage of using this API is that Unicode supplementary characters can be handled effectively.`}</p>\n    <p>{`Supplementary characters are represented by Unicode surrogate pairs and will be merged into a single codepoint. This way we can correctly process (and display) any Unicode symbol:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`IntStream`}</span>{` intStream1 `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`We need to map the returned `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`IntStream`}</code>{` to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream<Character>`}</code>{` to display it to users:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`Character`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` characterStream2 \n  `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2>{`Conversion to a Stream of Single Character Strings`}</h2>\n    <p>{`So far, we’ve been able to get a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream`}</code>{` of characters; what if we want a Stream of single character `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Strings`}</code>{` instead?`}</p>\n    <p>{`Just as specified earlier in the article, we’ll use either the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` methods to obtain an instance of IntStream that we can now map to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream<String>`}</code>{`.`}</p>\n    <p>{`The mapping process involves converting the integer values to their respective character equivalents first.`}</p>\n    <p>{`Then we can use String.valueOf() or Character.toString() to convert the characters to a String object:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"java\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-java\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-java\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`Stream`}</span><span parentName=\"code\" {...{\n            \"className\": \"token generics\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`<`}</span><span parentName=\"span\" {...{\n              \"className\": \"token class-name\"\n            }}>{`String`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`>`}</span></span>{` stringStream `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` testString`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`codePoints`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mapToObj`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`c `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`->`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`String`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`valueOf`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`char`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` c`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <h2>{`Conclusion`}</h2>\n    <p>{`In this quick tutorial, we learn to obtain a stream of Character from a String object by either calling `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`codePoints()`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`chars()`}</code>{` methods.`}</p>\n    <p>{`This allows us to take full advantage of the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Stream API`}</code>{` – to conveniently and effectively manipulate characters.`}</p>\n    <p>{`As always, code snippets can be found over on GitHub.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}